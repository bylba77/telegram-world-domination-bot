# admin_handlers.py

import random
import time
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
import config
import game_state
from keyboards import main_menu
from filters import PlayerFilter
from states import AdminAttack, AdminModify, AdminBroadcast
from global_events import EVENT_CLASSES
admin_router = Router()

# =====================================================================================
# --- –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ò –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö ---
# =====================================================================================

@admin_router.message(PlayerFilter(is_admin=True), F.text == "–ê–¥–º–∏–Ω–∫–∞")
async def admin_panel_menu(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏."""
    await state.clear()
    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É (1-–π —Ä–∞—É–Ω–¥)"), KeyboardButton(text="–ù–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥")],
        [KeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö"), KeyboardButton(text="–°–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤")],
        [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –≥–æ—Ä–æ–¥–∞"), KeyboardButton(text="–ê–¥–º–∏–Ω-—É–¥–∞—Ä")],
        [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"), KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–π–º–µ—Ä")],
        [KeyboardButton(text="üì∞ –°–≤–æ–¥–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π (–¥–ª—è —Å–µ–±—è)"), KeyboardButton(text="–†–∞–∑–æ—Å–ª–∞—Ç—å –≥–∞–∑–µ—Ç—É")],
        [KeyboardButton(text="‚öôÔ∏è –¢–µ—Å—Ç: –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"), KeyboardButton(text="–†–µ—Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ], resize_keyboard=True)
    await message.answer("–ê–¥–º–∏–Ω–∫–∞:", reply_markup=keyboard)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏ ---

@admin_router.message(PlayerFilter(is_admin=True), F.text == "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É (1-–π —Ä–∞—É–Ω–¥)")
async def handle_admin_start_game(message: types.Message, state: FSMContext):
    await admin_start_game_logic(message, state)

@admin_router.message(PlayerFilter(is_admin=True), F.text == "–ù–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥")
async def handle_admin_next_round(message: types.Message, state: FSMContext):
    await admin_next_round_logic(message, state)

@admin_router.message(PlayerFilter(is_admin=True), F.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö")
async def handle_admin_show_all_stats(message: types.Message, state: FSMContext):
    await admin_show_all_stats_logic(message, state)

@admin_router.message(PlayerFilter(is_admin=True), F.text == "–°–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤")
async def handle_admin_show_ready_list(message: types.Message, state: FSMContext):
    await admin_show_ready_list_logic(message, state)

@admin_router.message(PlayerFilter(is_admin=True), F.text == "–ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –≥–æ—Ä–æ–¥–∞")
async def handle_admin_modify_start(message: types.Message, state: FSMContext):
    await admin_modify_start(message, state)

@admin_router.message(PlayerFilter(is_admin=True), F.text == "–ê–¥–º–∏–Ω-—É–¥–∞—Ä")
async def handle_admin_attack_start(message: types.Message, state: FSMContext):
    await admin_attack_start(message, state)

@admin_router.message(PlayerFilter(is_admin=True), F.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
async def handle_admin_broadcast_start(message: types.Message, state: FSMContext):
    await admin_broadcast_start(message, state)

@admin_router.message(PlayerFilter(is_admin=True), F.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–π–º–µ—Ä")
async def handle_admin_check_timer(message: types.Message, state: FSMContext):
    await admin_check_timer_logic(message, state)

@admin_router.message(PlayerFilter(is_admin=True), F.text == "üì∞ –°–≤–æ–¥–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π (–¥–ª—è —Å–µ–±—è)")
async def handle_admin_show_newspaper_private(message: types.Message, state: FSMContext):
    await show_newspaper_logic_wrapper(message, state)

@admin_router.message(PlayerFilter(is_admin=True), F.text == "–†–∞–∑–æ—Å–ª–∞—Ç—å –≥–∞–∑–µ—Ç—É")
async def handle_admin_broadcast_newspaper(message: types.Message, state: FSMContext):
    from handlers import generate_newspaper_report
    newspaper_text = await generate_newspaper_report()
    if not newspaper_text:
        return await message.answer("üóû –ù–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ—Ç.")
    sent_count = 0
    for uid, p in game_state.players.items():
        if p.get("country") and not p.get("eliminated") and uid != config.ADMIN_ID:
            try:
                await message.bot.send_message(uid, newspaper_text, parse_mode="Markdown")
                sent_count += 1
            except Exception as e:
                print(f"Error broadcasting newspaper to {uid}: {e}")
    await message.answer(f"‚úÖ –ì–∞–∑–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–∞ {sent_count} –∏–≥—Ä–æ–∫–∞–º.")

@admin_router.message(PlayerFilter(is_admin=True), F.text == "–†–µ—Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã")
async def handle_admin_restart_game(message: types.Message, state: FSMContext):
    await admin_restart_game_logic(message, state)

@admin_router.message(PlayerFilter(is_admin=True), F.text == "‚öôÔ∏è –¢–µ—Å—Ç: –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
async def handle_admin_force_event(message: types.Message, state: FSMContext):
    await admin_force_event_logic(message, state)

@admin_router.message(PlayerFilter(is_admin=True), F.text == "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def handle_admin_back_to_main(message: types.Message, state: FSMContext):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu(message.from_user.id))

# =====================================================================================
# --- –ê–î–ú–ò–ù–°–ö–ò–ï FSM –ü–†–û–¶–ï–°–°–´ ---
# =====================================================================================

async def admin_attack_start(message: types.Message, state: FSMContext):
    targets = [p["country"] for uid, p in game_state.players.items() if uid != config.ADMIN_ID and p.get("country")]
    if not targets:
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–π.", reply_markup=main_menu(config.ADMIN_ID))
    kb_rows = [[KeyboardButton(text=t)] for t in targets] + [[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]]
    await message.answer("–í—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É-—Ü–µ–ª—å –¥–ª—è –∞–¥–º–∏–Ω-—É–¥–∞—Ä–∞:",
                         reply_markup=ReplyKeyboardMarkup(keyboard=kb_rows, resize_keyboard=True))
    await state.set_state(AdminAttack.choosing_target)

@admin_router.message(AdminAttack.choosing_target)
async def admin_attack_choose_target(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–ê–¥–º–∏–Ω-–∞—Ç–∞–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu(config.ADMIN_ID))
    target_uid = next((uid for uid, pl in game_state.players.items() if pl.get("country") == text), None)
    if not target_uid:
        return await message.answer("–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    await state.update_data(target_uid=target_uid)
    target_player = game_state.players[target_uid]
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ‚Ññ1
    kb_rows = [[KeyboardButton(text=c + (" (—Ä–∞–∑—Ä—É—à–µ–Ω)" if d.get("level", 1) == 0 else ""))] for c, d in
               target_player["cities"].items()]
    await message.answer(f"–¶–µ–ª—å ‚Äî {text}. –í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –¥–ª—è —É–¥–∞—Ä–∞:",
                         reply_markup=ReplyKeyboardMarkup(keyboard=kb_rows + [[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
                                                          resize_keyboard=True))
    await state.set_state(AdminAttack.choosing_city)

@admin_router.message(AdminAttack.choosing_city)
async def admin_attack_choose_city(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    target_uid = user_data.get("target_uid")
    target_player = game_state.players[target_uid]
    city_name = message.text.strip().replace(" (—Ä–∞–∑—Ä—É—à–µ–Ω)", "")
    await state.clear()
    if message.text.strip() == "–û—Ç–º–µ–Ω–∞":
        return await message.answer("–ê–¥–º–∏–Ω-–∞—Ç–∞–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu(config.ADMIN_ID))
    if city_name not in target_player["cities"]:
        return await message.answer("–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç —É —Ü–µ–ª–∏.")
    if target_player["cities"][city_name].get("level", 1) == 0:
        return await message.answer("–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ —É–∂–µ —Ä–∞–∑—Ä—É—à–µ–Ω.")
    result_text = ""
    if target_player["shields"] > 0:
        target_player["shields"] -= 1
        result_text = f"‚ö° –ê–¥–º–∏–Ω-–∞—Ç–∞–∫–∞ –Ω–∞ {city_name} –æ—Ç—Ä–∞–∂–µ–Ω–∞ —â–∏—Ç–æ–º! (–û—Å—Ç–∞–ª–æ—Å—å: {target_player['shields']})"
    else:
        city = target_player["cities"][city_name]
        city["level"], city["income"], city["qol"] = 0, 0, 0
        result_text = f"üí• –ê–¥–º–∏–Ω —Ä–∞–∑—Ä—É—à–∏–ª –≥–æ—Ä–æ–¥ {city_name} –≤ —Å—Ç—Ä–∞–Ω–µ {target_player['country']}."
    await message.answer(result_text, reply_markup=main_menu(config.ADMIN_ID))
    try:
        await message.bot.send_message(target_uid, f"‚ö° –í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞ –ø–æ–¥–≤–µ—Ä–≥–ª–∞—Å—å –∞–¥–º–∏–Ω-–∞—Ç–∞–∫–µ! {result_text}")
    except Exception as e:
        print(f"Error notifying player about admin attack: {e}")

async def admin_broadcast_start(message: types.Message, state: FSMContext):
    active_countries = [p['country'] for uid, p in game_state.players.items() if
                        p.get('country') and uid != config.ADMIN_ID]
    kb_rows = [[KeyboardButton(text="–í—Å–µ–º –∏–≥—Ä–æ–∫–∞–º")]] + [[KeyboardButton(text=c)] for c in active_countries] + [
        [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]]
    await message.answer("–ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?",
                         reply_markup=ReplyKeyboardMarkup(keyboard=kb_rows, resize_keyboard=True))
    await state.set_state(AdminBroadcast.choosing_target)

@admin_router.message(AdminBroadcast.choosing_target)
async def admin_broadcast_choose_target(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu(config.ADMIN_ID))
    if text == "–í—Å–µ–º –∏–≥—Ä–æ–∫–∞–º":
        await state.update_data(target='all')
    else:
        target_uid = next((uid for uid, pl in game_state.players.items() if pl.get("country") == text), None)
        if not target_uid:
            return await message.answer("–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.update_data(target=target_uid)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AdminBroadcast.typing_message)

@admin_router.message(AdminBroadcast.typing_message)
async def admin_broadcast_send(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    target = user_data.get('target')
    from handlers import format_admin_message
    formatted_message = format_admin_message(message.text)
    await state.clear()
    if target == 'all':
        for uid, p in game_state.players.items():
            if p.get("country") and not p.get("eliminated") and uid != config.ADMIN_ID:
                try:
                    await message.bot.send_message(uid, formatted_message, parse_mode="HTML")
                except Exception as e:
                    print(f"Error in broadcast to {uid}: {e}")
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º.", reply_markup=main_menu(config.ADMIN_ID))
    else:
        try:
            await message.bot.send_message(target, formatted_message, parse_mode="HTML")
            await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫—É.", reply_markup=main_menu(config.ADMIN_ID))
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}", reply_markup=main_menu(config.ADMIN_ID))

async def admin_modify_start(message: types.Message, state: FSMContext):
    active_countries = [p['country'] for uid, p in game_state.players.items() if
                        p.get('country') and uid != config.ADMIN_ID]
    if not active_countries:
        return await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω.", reply_markup=main_menu(config.ADMIN_ID))
    kb_rows = [[KeyboardButton(text=c)] for c in active_countries] + [[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]]
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                         reply_markup=ReplyKeyboardMarkup(keyboard=kb_rows, resize_keyboard=True))
    await state.set_state(AdminModify.choosing_country)

@admin_router.message(AdminModify.choosing_country)
async def admin_modify_choose_country(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu(config.ADMIN_ID))
    target_uid = next((uid for uid, pl in game_state.players.items() if pl.get("country") == text), None)
    if not target_uid:
        return await message.answer("–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    await state.update_data(target_uid=target_uid)
    target_player = game_state.players[target_uid]
    kb_rows = [[KeyboardButton(text=f"{name} (—É—Ä. {data.get('level', 0)})")] for name, data in
               target_player['cities'].items()] + [[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]]
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ —É {target_player['country']}:",
                         reply_markup=ReplyKeyboardMarkup(keyboard=kb_rows, resize_keyboard=True))
    await state.set_state(AdminModify.choosing_city)


@admin_router.message(AdminModify.choosing_city)
async def admin_modify_choose_city(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu(config.ADMIN_ID))

    city_name = text.split(" (—É—Ä.")[0]
    user_data = await state.get_data()
    target_uid = user_data.get('target_uid')
    target_player = game_state.players[target_uid]

    if city_name not in target_player['cities']:
        return await message.answer("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.update_data(city_name=city_name)
    city = target_player['cities'][city_name]
    actions = []
    if city['level'] < config.MAX_CITY_LEVEL: actions.append([KeyboardButton(text="–£–ª—É—á—à–∏—Ç—å –Ω–∞ 1")])
    if city['level'] > 0: actions.append([KeyboardButton(text="–£—Ö—É–¥—à–∏—Ç—å –Ω–∞ 1")])

    if not actions:
        await state.clear()
        return await message.answer(f"–î–ª—è –≥–æ—Ä–æ–¥–∞ {city_name} –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π.", reply_markup=main_menu(config.ADMIN_ID))

    await message.answer(f"–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –≥–æ—Ä–æ–¥–æ–º {city_name} (—É—Ä: {city['level']})?",
                         reply_markup=ReplyKeyboardMarkup(keyboard=actions + [[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
                                                          resize_keyboard=True))
    await state.set_state(AdminModify.choosing_action)

@admin_router.message(AdminModify.choosing_action)
async def admin_modify_perform_action(message: types.Message, state: FSMContext):
    text = message.text.strip()
    user_data = await state.get_data()
    target_uid = user_data.get('target_uid')
    city_name = user_data.get('city_name')
    city = game_state.players[target_uid]['cities'][city_name]
    await state.clear()
    if text == "–û—Ç–º–µ–Ω–∞":
        return await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu(config.ADMIN_ID))
    if text == "–£–ª—É—á—à–∏—Ç—å –Ω–∞ 1" and city['level'] < config.MAX_CITY_LEVEL:
        city['level'] += 1
    elif text == "–£—Ö—É–¥—à–∏—Ç—å –Ω–∞ 1" and city['level'] > 0:
        city['level'] -= 1
    else:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", reply_markup=main_menu(config.ADMIN_ID))
    city['income'] = city['level'] * 500 if city['level'] > 0 else 0
    if text == "–£–ª—É—á—à–∏—Ç—å –Ω–∞ 1":
        city['qol'] = min(100, city['qol'] + random.randint(7, 15))
    else:
        city['qol'] = max(0, city['qol'] - random.randint(7, 15)) if city['level'] > 0 else 0
    await message.answer(f"–ì–æ—Ä–æ–¥ {city_name} –∏–∑–º–µ–Ω–µ–Ω. –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {city['level']}.",
                         reply_markup=main_menu(config.ADMIN_ID))
    try:
        await message.bot.send_message(target_uid,
                                       f"üõ† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª —É—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ {city_name} –Ω–∞ {city['level']}!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞: {e}")

@admin_router.callback_query(F.data.startswith("admin_call_"))
async def handle_admin_call_response(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∞–¥–º–∏–Ω–æ–º –Ω–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—ã–∑–æ–≤."""
    action, player_id_str = callback.data.split(":")
    player_id = int(player_id_str)
    if player_id not in game_state.players:
        return await callback.answer("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
    response_map = {
        "admin_call_now": ("–°–µ–π—á–∞—Å –∑–∞–π–¥—É.", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–µ–π—á–∞—Å –∑–∞–π–¥–µ—Ç."),
        "admin_call_minute": ("–ë—É–¥—É —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."),
        "admin_call_come": ("–ó–∞–π–¥–∏ –∫–æ –º–Ω–µ.", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Å–∏—Ç –≤–∞—Å –∑–∞–π—Ç–∏ –∫ –Ω–µ–º—É."),
        "admin_call_ban": ("–ò–≥—Ä–æ–∫ –∑–∞–±–∞–Ω–µ–Ω.",
                           f"–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –æ—Ç –≤—ã–∑–æ–≤–∞ –∞–¥–º–∏–Ω–∞ –Ω–∞ {config.ADMIN_CALL_BAN_DURATION // 60} –º–∏–Ω—É—Ç—ã.")
    }
    admin_response, player_notification = response_map.get(action, (None, None))
    if action == "admin_call_ban":
        game_state.call_admin_bans[player_id] = time.time() + config.ADMIN_CALL_BAN_DURATION
    await callback.message.edit_text(f"{callback.message.text}\n\n‚úÖ <b>–û—Ç–≤–µ—Ç:</b> {admin_response}",
                                     parse_mode="HTML", reply_markup=None)
    try:
        await callback.bot.send_message(player_id, f"üîî <b>–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞:</b>\n{player_notification}",
                                        parse_mode="HTML")
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∏–≥—Ä–æ–∫—É {player_id}: {e}")
    await callback.answer()

# =====================================================================================
# --- –ê–î–ú–ò–ù–°–ö–ò–ï –õ–û–ì–ò–ß–ï–°–ö–ò–ï –ë–õ–û–ö–ò ---
# =====================================================================================

def calculate_qol_bonus(qol):
    if qol >= 90: return 1.30
    if qol >= 80: return 1.20
    if qol > 50:
        bonus_percent = (qol - 50) // 2
        return 1 + (bonus_percent / 100)
    if qol < 50:
        penalty_percent = (50 - qol) // 2
        return 1 - (penalty_percent / 100)
    return 1.0

async def admin_start_game_logic(message: types.Message, state: FSMContext):
    if game_state.round_end_time is not None:
        return await message.answer("–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç.", reply_markup=main_menu(config.ADMIN_ID))
    game_state.round_end_time = time.time() + config.ROUND_DURATION
    game_state.round_notifications = {'5_min': False, '3_min': False, '1_min': False, 'end': False}
    msg = "üéâ <b>–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –†–∞—É–Ω–¥ 1 –∑–∞–ø—É—â–µ–Ω.</b>"
    for uid, p in game_state.players.items():
        if p.get("country") and not p.get("eliminated") and uid != config.ADMIN_ID:
            try:
                await message.bot.send_message(uid, msg, parse_mode="HTML")
            except Exception as e:
                print(f"Error broadcasting start game to {uid}: {e}")
    await message.answer("‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!", reply_markup=main_menu(config.ADMIN_ID))


async def admin_next_round_logic(message: types.Message, state: FSMContext):
    # --- –ó–ê–©–ò–¢–ê –û–¢ –ú–ù–û–ì–û–ö–†–ê–¢–ù–û–ì–û –ù–ê–ñ–ê–¢–ò–Ø ---
    if game_state.is_processing_next_round:
        return await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞...")

    game_state.is_processing_next_round = True
    try:
        # --- –í–ï–°–¨ –ö–û–î –§–£–ù–ö–¶–ò–ò –ù–ê–•–û–î–ò–¢–°–Ø –í–ù–£–¢–†–ò –ë–õ–û–ö–ê TRY ---



        # 1. –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω—ã
        cooldowns_to_remove = []
        for event_id, rounds_left in game_state.event_cooldowns.items():
            game_state.event_cooldowns[event_id] -= 1
            if game_state.event_cooldowns[event_id] <= 0:
                cooldowns_to_remove.append(event_id)
        for event_id in cooldowns_to_remove:
            del game_state.event_cooldowns[event_id]

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
        if game_state.active_global_event:
            game_state.active_global_event['rounds_left'] -= 1
            if game_state.active_global_event['rounds_left'] <= 0:
                event_id = game_state.active_global_event['id']
                event_class = EVENT_CLASSES[event_id]
                event_object = event_class(message.bot, game_state.active_global_event)

                await event_object.on_fail(game_state.players)

                game_state.event_cooldowns[event_id] = 3
                game_state.active_global_event = None

        # 3. –®–∞–Ω—Å –Ω–∞ –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        elif random.random() < 0.33:
            available_events = [eid for eid in EVENT_CLASSES.keys() if eid not in game_state.event_cooldowns]

            if available_events:
                event_id = random.choice(available_events)
                event_class = EVENT_CLASSES[event_id]

                new_event_data = {
                    "id": event_id,
                    "progress": 0,
                    "rounds_left": event_class.duration
                }
                game_state.active_global_event = new_event_data
                game_state.event_cooldowns[event_id] = 3

                event_object = event_class(message.bot, new_event_data)
                start_msg = await event_object.get_start_message()

                for uid, p in game_state.players.items():
                    if p.get("country") and not p.get("eliminated"):
                        await message.bot.send_message(uid, start_msg, parse_mode="Markdown")
                await message.bot.send_message(config.ADMIN_ID, f"üîî (–î–ª—è –∞–¥–º–∏–Ω–∞) –ó–∞–ø—É—â–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event_class.name}")

        # –û—á–∏—â–∞–µ–º –±–ª–æ–∫–Ω–æ—Ç —Ä–µ–ø–æ—Ä—Ç—ë—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
        game_state.round_events.clear()

        # --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –†–ê–£–ù–î–ê ---
        game_state.current_round += 1
        game_state.round_end_time = time.time() + config.ROUND_DURATION
        game_state.round_notifications = {'5_min': False, '3_min': False, '1_min': False, 'end': False}

        for uid, p in game_state.players.items():
            if not p.get('country') or p.get('eliminated'): continue

            # –û–±–Ω—É–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Ä–∞—É–Ω–¥–∞
            p['ready_nukes'] += p.get('pending_nukes', 0)
            p['pending_nukes'] = 0
            p['actions_left'] = 5 if game_state.current_round == 10 else 4
            p['attacked_countries_this_round'] = []
            p['shields_built_this_round'] = 0
            p['upgrades_this_round'] = 0
            p['social_programs_this_round'] = 0
            p['ready_for_next_round'] = False

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
            effects_to_remove = []
            if 'temp_effects' in p:
                for effect_name, effect_data in p['temp_effects'].items():
                    effect_data['rounds_left'] -= 1
                    if effect_data['rounds_left'] <= 0:
                        effects_to_remove.append(effect_name)
                        try:
                            await message.bot.send_message(uid, f"üìà –≠—Ñ—Ñ–µ–∫—Ç '{effect_name}' –≤ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.")
                        except Exception:
                            pass
                for effect_name in effects_to_remove:
                    del p['temp_effects'][effect_name]

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–æ–∂–Ω—ã–π –¥–æ—Ö–æ–¥
            total_income = 0
            income_details = []

            global_income_modifier = 1.0
            if game_state.active_global_event:
                event_id = game_state.active_global_event['id']
                event_class = EVENT_CLASSES[event_id]
                if hasattr(event_class, 'on_start_effect'):
                    effect = event_class.on_start_effect
                    if effect and effect.get('type') == 'income_modifier':
                        global_income_modifier = 1.0 + effect.get('value', 0)

            temp_income_modifier = 1.0
            if 'recession' in p.get('temp_effects', {}):
                temp_income_modifier = 0.5

            permanent_modifier = p.get('income_modifier', 1.0)

            for city_name, city_data in p.get('cities', {}).items():
                base_income = city_data.get('income', 0)
                qol_multiplier = calculate_qol_bonus(city_data.get('qol', 0))

                final_income = int(
                    base_income * global_income_modifier * permanent_modifier * temp_income_modifier * qol_multiplier)
                total_income += final_income

                total_multiplier = global_income_modifier * permanent_modifier * temp_income_modifier * qol_multiplier
                bonus_percent = int((total_multiplier - 1) * 100)
                if bonus_percent != 0:
                    sign = "+" if bonus_percent > 0 else ""
                    income_details.append(
                        f"  ‚Ä¢ {city_name}: ${base_income} ({sign}{bonus_percent}%) -> ${final_income}")
                else:
                    income_details.append(f"  ‚Ä¢ {city_name}: ${base_income}")

            p['budget'] += total_income

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
            income_report = f"–î–æ—Ö–æ–¥: **${total_income}**.\n"
            if income_details:
                income_report += "*–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Ö–æ–¥–∞:*\n" + "\n".join(income_details) + "\n"

            msg = (f"üåê **–ù–∞—á–∞–ª—Å—è —Ä–∞—É–Ω–¥ {game_state.current_round}!**\n\n"
                   f"{income_report}\n"
                   f"–í–∞—à –±—é–¥–∂–µ—Ç: **${p['budget']}**")
            if game_state.current_round == 10: msg += "\n\nüéâ **–ë–æ–Ω—É—Å:** –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ +1 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!"

            try:
                await message.bot.send_message(uid, msg, parse_mode="Markdown", reply_markup=main_menu(uid))
            except Exception as e:
                print(f"Error sending next round message to {uid}: {e}")

        await message.answer(f"‚úÖ –†–∞—É–Ω–¥ {game_state.current_round} –Ω–∞—á–∞—Ç!", reply_markup=main_menu(config.ADMIN_ID))

    finally:
        # --- –°–ù–ò–ú–ê–ï–ú –ó–ê–ú–û–ö –í –õ–Æ–ë–û–ú –°–õ–£–ß–ê–ï ---
        game_state.is_processing_next_round = False

async def admin_restart_game_logic(message: types.Message, state: FSMContext):
    admin_data = game_state.players.get(config.ADMIN_ID)
    game_state.players.clear()
    if admin_data: game_state.players[config.ADMIN_ID] = admin_data
    game_state.current_round, game_state.round_end_time = 1, None
    game_state.round_events.clear()
    game_state.active_global_event = None
    await message.answer("üî• –ò–≥—Ä–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—à–µ–Ω–∞!", reply_markup=main_menu(config.ADMIN_ID))

async def admin_show_all_stats_logic(message: types.Message, state: FSMContext):
    active_players = [p for p in game_state.players.values() if p.get('country')]
    if not active_players:
        return await message.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.")
    stats_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω:</b>\n\n"
    for uid, p in game_state.players.items():
        if not p.get('country'): continue
        display_text = f"<b>{p['country']} ({p.get('nickname', 'N/A')})</b>"
        stats_text += (f"{display_text} (ID: <code>{uid}</code>)\n"
                       f"üí∞ –ë—é–¥–∂–µ—Ç: {p.get('budget', 0)}\n"
                       f"üöÄ –†–∞–∫–µ—Ç—ã: {p.get('ready_nukes', 0)}/{p.get('pending_nukes', 0)}\n"
                       f"üõ° –©–∏—Ç—ã: {p.get('shields', 0)}\n")
        for city, data in p.get('cities', {}).items():
            stats_text += f"  ‚Ä¢ {city}: —É—Ä. {data['level']}, QoL {data['qol']}%\n"
        stats_text += "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
    await message.answer(stats_text, parse_mode="HTML")

async def admin_show_ready_list_logic(message: types.Message, state: FSMContext):
    active_players = [p for uid, p in game_state.players.items() if
                      p.get("country") and not p.get("eliminated") and uid != config.ADMIN_ID]
    if not active_players:
        return await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.")
    ready = [p["country"] for p in active_players if p.get("ready_for_next_round")]
    not_ready = [p["country"] for p in active_players if not p.get("ready_for_next_round")]
    text = "üìä <b>–°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:</b>\n\n"
    if ready: text += f"‚úÖ –ì–æ—Ç–æ–≤—ã ({len(ready)}):\n" + ", ".join(ready) + "\n\n"
    if not_ready: text += f"‚ùå –ù–µ –≥–æ—Ç–æ–≤—ã ({len(not_ready)}):\n" + ", ".join(not_ready) + "\n"
    await message.answer(text, parse_mode="HTML")

async def admin_check_timer_logic(message: types.Message, state: FSMContext):
    if game_state.round_end_time is None:
        return await message.answer("–¢–∞–π–º–µ—Ä —Ä–∞—É–Ω–¥–∞ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
    time_left = round(game_state.round_end_time - time.time())
    status = f"<b>–°—Ç–∞—Ç—É—Å —Ç–∞–π–º–µ—Ä–∞:</b>\n\n<b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {time_left} —Å–µ–∫\n\n<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
    for key, readable in [('5_min', '5 –º–∏–Ω—É—Ç'), ('3_min', '3 –º–∏–Ω—É—Ç—ã'), ('1_min', '1 –º–∏–Ω—É—Ç–∞'), ('end', '–ö–æ–Ω–µ—Ü')]:
        status += f"‚Ä¢ {readable}: {'‚úÖ' if game_state.round_notifications.get(key) else '‚ùå'}\n"
    await message.answer(status, parse_mode="HTML")

async def show_newspaper_logic_wrapper(message: types.Message, state: FSMContext):
    from handlers import generate_newspaper_report
    newspaper_text = await generate_newspaper_report()
    if newspaper_text:
        await message.answer(newspaper_text, parse_mode="Markdown")
    else:
        await message.answer("üóû –í –º–∏—Ä–µ –ø–æ–∫–∞ –∑–∞—Ç–∏—à—å–µ. –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ –∏—Ç–æ–≥–∞–º –ø—Ä–æ—à–ª–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –Ω–µ—Ç.")

async def admin_force_event_logic(message: types.Message, state: FSMContext):
    from global_events import EVENT_CLASSES
    if game_state.active_global_event:
        return await message.answer(
            f"–¢–µ—Å—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω: —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ —Å–æ–±—ã—Ç–∏–µ '{game_state.active_global_event['name']}'.")
    event_id = random.choice(list(EVENT_CLASSES.keys()))
    event_data = EVENT_CLASSES[event_id]
    game_state.active_global_event = {
        "id": event_id, "name": event_data["name"],
        "progress": 0, "rounds_left": event_data["duration"]
    }
    start_msg = event_data["start_message"].format(goal_amount=event_data.get("goal_amount", 0))
    for uid, p in game_state.players.items():
        if p.get("country") and not p.get("eliminated"):
            try:
                await message.bot.send_message(uid, start_msg, parse_mode="Markdown")
            except Exception as e:
                print(f"Error broadcasting test event to {uid}: {e}")
    await message.answer(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ '{event_data['name']}' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")
