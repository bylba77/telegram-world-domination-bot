# newspaper_templates.py

import random

TEMPLATES = {
    # Ключ: (Порог для обобщения, Шаблоны для единичных, Шаблоны для обобщения)
    "BUNKER_BUILT": (3,
        [
            "«Безопасность превыше всего»: **{country}** вкладывается в строительство подземных убежищ.",
            "На фоне глобальной напряженности, **{country}** начинает программу по укреплению гражданской обороны.",
            "В **{country}** слышен гул строительной техники: правительство готовит нацию к худшему."
        ],
        [
            "«Бункерная лихорадка» охватила мир: лидеры массово строят убежища, готовясь к неизвестному будущему.",
            "Подземный мир: аналитики отмечают глобальный тренд на строительство систем гражданской обороны.",
            "Страх или предусмотрительность? Мировые державы тратят миллиарды на строительство бункеров."
        ]),
    "SOCIAL_PROGRAM": (3,
        [
            "«Наш главный ресурс — это люди», — заявил лидер **{country}**, анонсируя новые социальные программы.",
            "В **{country}** сегодня праздник: правительство инвестирует в счастье народа, запуская масштабную социальную реформу.",
            "Экономисты в недоумении: **{country}** тратит огромные средства на социальные нужды в такое неспокойное время.",
            "Индекс счастья в **{country}** растёт: запуск новых соц. программ был тепло встречен населением.",
            "**{country}** делает ставку на внутреннюю политику, улучшая качество жизни своих граждан."
        ],
        [
            "Волна популизма захлестнула мир: лидеры задабривают электорат дорогостоящими социальными программами.",
            "Мировые лидеры соревнуются в щедрости, запуская масштабные инициативы по повышению уровня жизни.",
            "«Хлеба и зрелищ!» — этот древний лозунг снова актуален. Правительства по всему миру пытаются поднять дух своих наций."
        ]),
    "SHIELD_BUILT": (3,
        [
            "Небо над **{country}** стало безопаснее благодаря развертыванию нового противоракетного купола.",
            "**{country}** демонстрирует оборонительную мощь, инвестируя в защитные технологии.",
            "Лидер **{country}** делает ставку на безопасность, укрепляя границы новым силовым щитом.",
            "«Мы готовы к любым угрозам», — заявляют в правительстве **{country}** после активации новой системы ПРО.",
            "Инженеры в **{country}** совершили прорыв: их новый защитный купол уже введён в эксплуатацию."
        ],
        [
            "Мир готовится к худшему? По всему земному шару наблюдается резкий рост расходов на оборону.",
            "Гонка вооружений переходит в оборонительную фазу: несколько мировых держав одновременно укрепляют свои рубежи.",
            "Напряжение в мире растет: лидеры ведущих стран массово вкладываются в защитные системы.",
            "«Эпоха стеклянных потолков»: аналитики отмечают бум строительства защитных куполов по всему миру.",
            "Политики отвечают на глобальную нестабильность единственным известным им способом — строительством стен, пусть и энергетических."
        ]),
    "NUKE_PRODUCED": (3,
        [
            "Разведка докладывает: **{country}** начинает работу над новым ядерным проектом. Мир затаил дыхание.",
            "**{country}** бряцает ядерным оружием. Является ли это демонстрацией силы или подготовкой к агрессии?",
            "Зловещая тишина из **{country}** нарушена новостями о начале производства оружия массового поражения.",
            "«Это исключительно для сдерживания», — уверяет лидер **{country}**, но эксперты сомневаются.",
            "Атомный гриб отбрасывает тень на политику **{country}**: начато производство новой боеголовки."
        ],
        [
            "Мир на пороге ядерной войны? Сразу несколько держав начали производство ОМП, нарушая глобальный паритет.",
            "Политологи бьют тревогу: гонка ядерных вооружений достигла своего пика. Часы Судного дня спешат вперед.",
            "Политическая атмосфера накаляется: ведущие игроки на мировой арене делают ставку на ядерное сдерживание.",
            "Запах озона в воздухе: по планете прокатилась волна новостей о запуске ядерных программ.",
            "Дипломаты разводят руками: мир снова охвачен ядерной лихорадкой."
        ]),
    "CITY_UPGRADED": (3,
        [
            "**{country}** инвестирует в будущее, запуская масштабный проект по модернизации одного из своих ключевых городов.",
            "Экономическое чудо в **{country}**: уровень жизни в одном из мегаполисов резко вырос благодаря грамотной политике.",
            "В то время как другие готовятся к войне, **{country}** сосредоточилась на процветании своего народа.",
            "Новые парки, блестящие небоскребы: один из городов **{country}** превращается в мегаполис будущего.",
            "«Наш главный ресурс — это люди», — заявил лидер **{country}**, анонсируя новые социальные программы."
        ],
        [
            "Эпоха процветания? По всему миру наблюдается строительный бум и рост экономики.",
            "Пока политики молчат, экономика говорит: глобальный уровень жизни демонстрирует уверенный рост.",
            "Лидеры вкладываются в инфраструктуру: похоже, мир переживает период редкого экономического оптимизма.",
            "Глобализация в действии: экономики ведущих стран показывают синхронный рост.",
            "На мировых рынках царит бычий тренд: инвесторы верят в светлое будущее."
        ]),
    "ATTACK_SUCCESS": (None,
        [
            "**СРОЧНАЯ НОВОСТЬ:** Мир содрогнулся! **{attacker}** нанесла сокрушительный удар по **{target}**, город {city} стёрт с лица земли!",
            "**МОЛНИЯ:** Дипломатия провалилась. **{attacker}** перешла красную черту, уничтожив город {city} в стране **{target}**.",
            "Трагедия мирового масштаба: ракетный удар со стороны **{attacker}** превратил {city} (**{target}**) в руины.",
            "Военная машина **{attacker}** показала свою мощь: город {city} в **{target}** был успешно нейтрализован.",
            "Первый удар в новой войне: **{attacker}** продемонстрировала серьёзность своих намерений, атаковав {city}."
        ], None),
    "ATTACK_SHIELDED": (None,
        [
            "**ЩИТ ВЫДЕРЖАЛ!** Атака **{attacker}** на **{target}** провалилась благодаря новейшей системе ПРО.",
            "Попытка агрессии со стороны **{attacker}** была успешно пресечена. Защитный купол над **{target}** доказал свою эффективность.",
            "Мир был на волоске от катастрофы, но оборона **{target}** отразила ракетный удар от **{attacker}**.",
            "«Железный купол» **{target}** оправдал вложенные в него средства, отразив атаку **{attacker}**.",
            "Беспомощная ярость: ракета **{attacker}** испарилась в силовом поле над **{target}**."
        ], None),
    "COUNTRY_ELIMINATED": (None,
        [
            "**ИСТОРИЧЕСКОЕ СОБЫТИЕ:** **{country}** прекратила свое существование как суверенное государство после сокрушительной атаки со стороны **{attacker}**.",
            "**ЧЕРНЫЙ ДЕНЬ В ИСТОРИИ:** На политической карте мира стало на одну страну меньше. **{country}** пала под ударами **{attacker}**.",
            "Триумф и трагедия: **{attacker}** празднует победу, в то время как от **{country}** остались лишь воспоминания.",
            "Мировое сообщество в шоке: **{country}** была аннексирована в результате молниеносной военной кампании **{attacker}**."
        ], None),
    "SURRENDERED": (None,
        [
            "Политический кризис в **{country}**: лидер страны объявил о капитуляции. Будущее нации туманно.",
            "**{country}** вывесила белый флаг. Правительство сложило с себя полномочия, дальнейшая судьба страны неизвестна.",
            "Сломленный, но не забытый: лидер **{country}** объявил о выходе из мировой гонки.",
            "Нация в трауре: правительство **{country}** признало поражение."
        ], None)
}

def get_random_template(event_type, is_summary=False):
    """Безопасно получает случайный шаблон для события."""
    event_data = TEMPLATES.get(event_type)
    if not event_data:
        return None
    threshold, specific_templates, summary_templates = event_data
    if is_summary and summary_templates:
        return random.choice(summary_templates)
    elif not is_summary and specific_templates:
        return random.choice(specific_templates)
    return None