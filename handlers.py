# handlers.py

import random
import time
from collections import Counter
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton,
                           InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
import config
import game_state
from keyboards import (main_menu,construction_menu,diplomacy_menu,military_menu)
from newspaper_templates import TEMPLATES
from filters import PlayerFilter
from states import (Registration, Attack, Negotiation, Surrender, Upgrade, LendLease, SocialProgram, GlobalEvent,Bunker)
from global_events import EVENT_CLASSES

router = Router()


# =====================================================================================
# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–Ø –ò –§–£–ù–ö–¶–ò–Ø-–§–ò–õ–¨–¢–† ---
# =====================================================================================

def calculate_upgrade_cost(city_level):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è."""
    return config.BASE_UPGRADE_COST + (city_level * config.UPGRADE_COST_INCREASE)


def format_admin_message(text):
    """–ö—Ä–∞—Å–∏–≤–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –∑–¥–µ—Å—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –∞–¥–º–∏–Ω-—Ñ–∞–π–ª)."""
    header = "üîî <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>"
    line = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
    return f"{line}\n{header}\n{line}\n\n{text}\n\n{line}"


def is_player_in_game(message: types.Message) -> bool:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-—Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –∏–≥—Ä–æ–∫."""
    return message.from_user.id in game_state.players and game_state.players[message.from_user.id].get("country")


async def not_in_game_answer(message: types.Message):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤."""
    await message.answer("–Ø –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≤–∞—Å –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")


# =====================================================================================
# --- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ò –°–ò–°–¢–ï–ú–ù–´–ï –ö–û–ú–ê–ù–î–´ ---
# =====================================================================================

@router.message(Command(commands=["start"]))
async def start_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    await state.clear()
    user_id = message.from_user.id

    if user_id not in game_state.players:
        game_state.players[user_id] = {
            "country": None, "nickname": None, "budget": config.START_BUDGET, "cities": {},
            "pending_nukes": 0, "ready_nukes": 0, "shields": 0, "actions_left": 4,
            "income_modifier": 1.0, "temp_effects": {},
            "attacked_countries_this_round": [], "eliminated": False,
            "shields_built_this_round": 0, "upgrades_this_round": 0,
            "social_programs_this_round": 0,
            "ready_for_next_round": False
        }

    if user_id == config.ADMIN_ID:
        return await message.answer("‚úÖ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.", reply_markup=main_menu(user_id))
    if game_state.players[user_id].get("country"):
        return await message.answer("–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ.", reply_markup=main_menu(user_id))

    taken_countries = {p.get("country") for p in game_state.players.values() if p.get("country")}
    available_countries = [c for c in config.countries.keys() if c not in taken_countries]

    if not available_countries:
        return await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã —É–∂–µ –∑–∞–Ω—è—Ç—ã.")

    kb_rows = [[KeyboardButton(text=name)] for name in available_countries]
    kb = ReplyKeyboardMarkup(keyboard=kb_rows, resize_keyboard=True)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ '–ú–∏—Ä–æ–≤–æ–µ –ì–æ—Å–ø–æ–¥—Å—Ç–≤–æ'! –í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Å—Ç—Ä–∞–Ω—É:", reply_markup=kb)
    await state.set_state(Registration.choosing_country)


@router.message(Registration.choosing_country)
async def process_country_selection(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤–≤–æ–¥—É –Ω–∏–∫–Ω–µ–π–º–∞."""
    user_id, text = message.from_user.id, message.text.strip()
    if text not in config.countries:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
    if any(p.get("country") == text for p in game_state.players.values()):
        return await message.answer("–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.")

    player = game_state.players[user_id]
    player["country"] = text
    player["cities"] = {city: {"level": 1, "income": 500, "qol": 35, "bunker_level": 0} for city in config.countries[text]}

    await state.set_state(Registration.entering_nickname)
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {text}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º:", reply_markup=ReplyKeyboardRemove())


@router.message(Registration.entering_nickname)
async def process_nickname(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∏–∫–Ω–µ–π–º–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."""
    if not message.text:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ –≤–∏–¥–µ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.")

    user_id, nickname = message.from_user.id, message.text.strip()
    if not nickname or len(nickname) > 15:
        return await message.answer("–ù–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 15 —Å–∏–º–≤–æ–ª–æ–≤.")

    game_state.players[user_id]["nickname"] = nickname
    await state.clear()
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, {nickname}! –í—ã –≤ –∏–≥—Ä–µ. –£–¥–∞—á–∏!", reply_markup=main_menu(user_id))


@router.message(Command(commands=["cancel"]))
async def cancel_handler(message: types.Message, state: FSMContext):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–π—Ç–∏ –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM."""
    current_state = await state.get_state()
    if current_state is None:
        return await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=main_menu(message.from_user.id))

    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu(message.from_user.id))


# =====================================================================================
# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–î–ò–ù–û–ß–ù–´–• –î–ï–ô–°–¢–í–ò–ô –ò–ì–†–û–ö–ê ---
# =====================================================================================

@router.message(PlayerFilter(is_admin=False), F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics_handler(message: types.Message):
    if not is_player_in_game(message): return await not_in_game_answer(message)
    await show_statistics_logic(message)


@router.message(PlayerFilter(is_admin=False), F.text == "–û–±–∑–æ—Ä —Å—Ç—Ä–∞–Ω")
async def overview_countries_handler(message: types.Message):
    if not is_player_in_game(message): return await not_in_game_answer(message)
    await overview_countries_logic(message)


@router.message(PlayerFilter(is_admin=False), F.text == "üì∞ –°–≤–æ–¥–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π")
async def show_newspaper_handler(message: types.Message):
    if not is_player_in_game(message): return await not_in_game_answer(message)
    newspaper_text = await generate_newspaper_report()
    if newspaper_text:
        await message.answer(newspaper_text, parse_mode="Markdown")
    else:
        await message.answer("üóû –í –º–∏—Ä–µ –ø–æ–∫–∞ –∑–∞—Ç–∏—à—å–µ. –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ –∏—Ç–æ–≥–∞–º –ø—Ä–æ—à–ª–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –Ω–µ—Ç.")


@router.message(PlayerFilter(is_admin=False), F.text.in_({"‚úÖ –Ø –≥–æ—Ç–æ–≤", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å"}))
async def toggle_ready_status_handler(message: types.Message):
    if not is_player_in_game(message): return await not_in_game_answer(message)
    await toggle_ready_status_logic(message)


@router.message(PlayerFilter(is_admin=False), F.text == "–í—ã–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω–∞")
async def call_admin_handler(message: types.Message):
    if not is_player_in_game(message): return await not_in_game_answer(message)
    await call_admin_logic(message)


@router.message(PlayerFilter(is_admin=False), F.text == "–ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —è–¥–µ—Ä–Ω—É—é –±–æ–º–±—É")
async def produce_nuclear_handler(message: types.Message):
    if not is_player_in_game(message): return await not_in_game_answer(message)
    if game_state.players[message.from_user.id]['actions_left'] <= 0:
        return await message.answer("‚ùå –£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ.",
                                    reply_markup=main_menu(message.from_user.id))
    await produce_nuclear_logic(message)


@router.message(PlayerFilter(is_admin=False), F.text == "–°–æ–∑–¥–∞—Ç—å —â–∏—Ç")
async def create_shield_handler(message: types.Message):
    if not is_player_in_game(message): return await not_in_game_answer(message)
    if game_state.players[message.from_user.id]['actions_left'] <= 0:
        return await message.answer("‚ùå –£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ.",
                                    reply_markup=main_menu(message.from_user.id))
    await create_shield_logic(message)

@router.message(PlayerFilter(is_admin=False), F.text == "üè¢ –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ")
async def show_construction_menu(message: types.Message):
    if not is_player_in_game(message): return await not_in_game_answer(message)
    await message.answer("–í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è.", reply_markup=construction_menu())

@router.message(PlayerFilter(is_admin=False), F.text == "üí• –í–æ–µ–Ω–Ω–æ–µ –¥–µ–ª–æ")
async def show_military_menu(message: types.Message):
    if not is_player_in_game(message): return await not_in_game_answer(message)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä—è–º–æ –∑–¥–µ—Å—å
    actions_left = game_state.players[message.from_user.id].get('actions_left', 0)
    await message.answer(f"–í—ã –≤–æ—à–ª–∏ –≤ –≤–æ–µ–Ω–Ω—ã–π —à—Ç–∞–±. –î–µ–π—Å—Ç–≤–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: {actions_left}", reply_markup=military_menu())

@router.message(PlayerFilter(is_admin=False), F.text == "üèõÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞")
async def show_diplomacy_menu(message: types.Message):
    if not is_player_in_game(message): return await not_in_game_answer(message)
    await message.answer("–í—ã –≤–æ—à–ª–∏ –≤ –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –¥–µ–ª.", reply_markup=diplomacy_menu())

@router.message(PlayerFilter(is_admin=False), F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: types.Message):
    if not is_player_in_game(message): return await not_in_game_answer(message)
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu(message.from_user.id))
# =====================================================================================
# --- FSM –ü–†–û–¶–ï–°–°–´ –ò–ì–†–û–ö–ê ---
# =====================================================================================
# handlers.py

# --- –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –±—É–Ω–∫–µ—Ä–∞ ---
@router.message(PlayerFilter(is_admin=False), F.text == "üß± –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –±—É–Ω–∫–µ—Ä")
async def bunker_start(message: types.Message, state: FSMContext):
    if not is_player_in_game(message): return await not_in_game_answer(message)
    user_id = message.from_user.id
    player = game_state.players[user_id]

    if player['actions_left'] <= 0:
        return await message.answer("‚ùå –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ.", reply_markup=main_menu(user_id))

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±—É–Ω–∫–µ—Ä–∞—Ö –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    city_options = []
    for city_name, city_data in player["cities"].items():
        current_level = city_data.get("bunker_level", 0)
        if current_level < config.MAX_BUNKER_LEVEL:
            next_level = current_level + 1
            cost = config.BUNKER_COSTS[next_level]
            city_options.append(f"{city_name} (—É—Ä. {current_level} -> {next_level}, ${cost})")

    if not city_options:
        return await message.answer("–í—Å–µ –≤–∞—à–∏ –≥–æ—Ä–æ–¥–∞ —É–∂–µ –∏–º–µ—é—Ç –±—É–Ω–∫–µ—Ä—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.",
                                    reply_markup=main_menu(user_id))

    kb_rows = [[KeyboardButton(text=option)] for option in city_options] + [[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]]
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞/—É–ª—É—á—à–µ–Ω–∏—è –±—É–Ω–∫–µ—Ä–∞:",
                         reply_markup=ReplyKeyboardMarkup(keyboard=kb_rows, resize_keyboard=True))
    await state.set_state(Bunker.choosing_city)


@router.message(Bunker.choosing_city)
async def bunker_process(message: types.Message, state: FSMContext):
    await state.clear()
    selected_option = message.text.strip()
    user_id = message.from_user.id

    if selected_option == "–û—Ç–º–µ–Ω–∞":
        return await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu(user_id))

    try:
        city_name = selected_option.split(" (—É—Ä.")[0]
    except:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.", reply_markup=main_menu(user_id))

    player = game_state.players[user_id]
    if city_name not in player["cities"]:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ—Ä–æ–¥.", reply_markup=main_menu(user_id))

    city_data = player["cities"][city_name]
    current_level = city_data.get("bunker_level", 0)

    if current_level >= config.MAX_BUNKER_LEVEL:
        return await message.answer("–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ —É–∂–µ –∏–º–µ–µ—Ç –±—É–Ω–∫–µ—Ä –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.",
                                    reply_markup=main_menu(user_id))

    next_level = current_level + 1
    cost = config.BUNKER_COSTS[next_level]

    if player["budget"] < cost:
        return await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—é–¥–∂–µ—Ç–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è ${cost}.", reply_markup=main_menu(user_id))
    if player['actions_left'] <= 0:
        return await message.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –æ—á–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π.", reply_markup=main_menu(user_id))

    # --- –ü—Ä–æ–≤–æ–¥–∏–º —É–ª—É—á—à–µ–Ω–∏–µ ---
    player["budget"] -= cost
    player["actions_left"] -= 1
    city_data["bunker_level"] = next_level

    game_state.round_events.append({'type': 'BUNKER_BUILT', 'country': player['country']})

    await message.answer(
        f"‚úÖ –ë—É–Ω–∫–µ—Ä –≤ –≥–æ—Ä–æ–¥–µ **{city_name}** —É–ª—É—á—à–µ–Ω –¥–æ **—É—Ä–æ–≤–Ω—è {next_level}** –∑–∞ ${cost}!\n\n"
        f"–í–∞—à –±—é–¥–∂–µ—Ç: ${player['budget']}\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –¥–µ–π—Å—Ç–≤–∏–π: {player['actions_left']}",
        parse_mode="Markdown",
        reply_markup=main_menu(user_id)
    )
# --- –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ ---
@router.message(PlayerFilter(is_admin=False), F.text == "üéâ –°–æ—Ü. –ø—Ä–æ–≥—Ä–∞–º–º–∞")
async def social_program_start(message: types.Message, state: FSMContext):
    if not is_player_in_game(message): return await not_in_game_answer(message)
    user_id = message.from_user.id
    player = game_state.players[user_id]
    if player['actions_left'] <= 0:
        return await message.answer("‚ùå –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ.", reply_markup=main_menu(user_id))
    if player.get("social_programs_this_round", 0) >= config.MAX_SOCIAL_PROGRAMS_PER_ROUND:
        return await message.answer(f"‚ùå –õ–∏–º–∏—Ç —Å–æ—Ü. –ø—Ä–æ–≥—Ä–∞–º–º ({config.MAX_SOCIAL_PROGRAMS_PER_ROUND}).")
    if player['budget'] < config.SOCIAL_PROGRAM_COST:
        return await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ ${config.SOCIAL_PROGRAM_COST}.")

    kb_rows = [[KeyboardButton(text=city)] for city in player["cities"].keys()] + [[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]]
    keyboard = ReplyKeyboardMarkup(keyboard=kb_rows, resize_keyboard=True)
    await message.answer(f"–ó–∞–ø—É—Å–∫ —Å–æ—Ü. –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å—Ç–æ–∏—Ç ${config.SOCIAL_PROGRAM_COST}.\n"
                         "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –±–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏—è:",
                         reply_markup=keyboard)
    await state.set_state(SocialProgram.choosing_city)


# handlers.py

async def social_program_logic(message: types.Message, city_name: str):
    user_id = message.from_user.id
    player = game_state.players[user_id]

    player['budget'] -= config.SOCIAL_PROGRAM_COST
    player['actions_left'] -= 1
    player['social_programs_this_round'] = player.get("social_programs_this_round", 0) + 1

    city_data = player['cities'][city_name]
    old_qol = city_data['qol']
    if old_qol >= 90:
        qol_increase = random.randint(2, 4)
    elif old_qol >= 80:
        qol_increase = random.randint(3, 5)
    elif old_qol >= 70:
        qol_increase = random.randint(3, 7)
    else:
        qol_increase = random.randint(5, 10)  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–æ–Ω—É—Å
    city_data['qol'] = min(100, old_qol + qol_increase)
    game_state.round_events.append({'type': 'SOCIAL_PROGRAM', 'country': player['country']})
    await message.answer(f"üéâ –°–æ—Ü. –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤ –≥–æ—Ä–æ–¥–µ {city_name} –∑–∞–ø—É—â–µ–Ω–∞ –∑–∞ ${config.SOCIAL_PROGRAM_COST}!\n"
                         f"–£—Ä–æ–≤–µ–Ω—å –∂–∏–∑–Ω–∏: {old_qol}% ‚ÜóÔ∏è {city_data['qol']}% (+{qol_increase}%)\n\n"
                         f"–í–∞—à –±—é–¥–∂–µ—Ç: ${player['budget']}.\n"
                         f"–û—Å—Ç–∞–ª–æ—Å—å –¥–µ–π—Å—Ç–≤–∏–π: {player['actions_left']}.",
                         reply_markup=main_menu(user_id))


# --- –£–ª—É—á—à–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ ---
@router.message(PlayerFilter(is_admin=False), F.text == "–£–ª—É—á—à–∏—Ç—å –≥–æ—Ä–æ–¥")
async def upgrade_city_start(message: types.Message, state: FSMContext):
    if not is_player_in_game(message): return await not_in_game_answer(message)
    user_id = message.from_user.id
    player = game_state.players[user_id]

    if player['actions_left'] <= 0:
        return await message.answer("‚ùå –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ.", reply_markup=main_menu(user_id))
    if player.get("upgrades_this_round", 0) >= config.MAX_UPGRADES_PER_ROUND:
        return await message.answer(f"‚ùå –õ–∏–º–∏—Ç —É–ª—É—á—à–µ–Ω–∏–π ({config.MAX_UPGRADES_PER_ROUND}).",
                                    reply_markup=main_menu(user_id))

    kb_rows = [[KeyboardButton(text=city)] for city in player["cities"].keys()] + [[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]]
    await message.answer("–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:",
                         reply_markup=ReplyKeyboardMarkup(keyboard=kb_rows, resize_keyboard=True))
    await state.set_state(Upgrade.choosing_city)


@router.message(Upgrade.choosing_city)
async def upgrade_city_process(message: types.Message, state: FSMContext):
    await state.clear()
    city_name = message.text.strip()
    if city_name == "–û—Ç–º–µ–Ω–∞":
        return await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu(message.from_user.id))
    if city_name not in game_state.players[message.from_user.id]["cities"]:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ—Ä–æ–¥.", reply_markup=main_menu(message.from_user.id))
    await upgrade_city_logic(message)


@router.message(SocialProgram.choosing_city)
async def social_program_process_city(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É."""
    await state.clear()  # –°—Ä–∞–∑—É —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    city_name = message.text.strip()
    user_id = message.from_user.id

    if city_name == "–û—Ç–º–µ–Ω–∞":
        return await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu(user_id))

    player = game_state.players[user_id]
    if city_name not in player['cities']:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ—Ä–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=main_menu(user_id))

    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—é–¥–∂–µ—Ç–∞ –Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if player['budget'] < config.SOCIAL_PROGRAM_COST:
        return await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (${config.SOCIAL_PROGRAM_COST}). –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                                    reply_markup=main_menu(user_id))

    # --- –í–°–¢–ê–í–õ–ï–ù–ê –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ---
    player['budget'] -= config.SOCIAL_PROGRAM_COST
    player['actions_left'] -= 1
    player['social_programs_this_round'] = player.get("social_programs_this_round", 0) + 1

    city_data = player['cities'][city_name]
    old_qol = city_data['qol']

    # –°—Ç—É–ø–µ–Ω—á–∞—Ç–∞—è –ª–æ–≥–∏–∫–∞
    if old_qol >= 90:
        qol_increase = random.randint(2, 4)
    elif old_qol >= 80:
        qol_increase = random.randint(3, 5)
    elif old_qol >= 70:
        qol_increase = random.randint(3, 7)
    else:
        qol_increase = random.randint(5, 10)

    city_data['qol'] = min(100, old_qol + qol_increase)

    game_state.round_events.append({'type': 'SOCIAL_PROGRAM', 'country': player['country']})

    await message.answer(f"üéâ –°–æ—Ü. –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤ –≥–æ—Ä–æ–¥–µ {city_name} –∑–∞–ø—É—â–µ–Ω–∞ –∑–∞ ${config.SOCIAL_PROGRAM_COST}!\n"
                         f"–£—Ä–æ–≤–µ–Ω—å –∂–∏–∑–Ω–∏: {old_qol}% ‚ÜóÔ∏è {city_data['qol']}% (+{qol_increase}%)\n\n"
                         f"–í–∞—à –±—é–¥–∂–µ—Ç: ${player['budget']}.\n"
                         f"–û—Å—Ç–∞–ª–æ—Å—å –¥–µ–π—Å—Ç–≤–∏–π: {player['actions_left']}.",
                         reply_markup=main_menu(user_id))

# --- –õ–µ–Ω–¥-–ª–∏–∑ ---
@router.message(PlayerFilter(is_admin=False), F.text == "ü§ù –û–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å")
async def lend_lease_start(message: types.Message, state: FSMContext):
    if not is_player_in_game(message): return await not_in_game_answer(message)
    user_id = message.from_user.id
    player = game_state.players[user_id]
    if player['actions_left'] <= 0:
        return await message.answer("‚ùå –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ.", reply_markup=main_menu(user_id))

    if player['budget'] <= 0:
        return await message.answer("–í–∞—à–∞ –∫–∞–∑–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=main_menu(user_id))

    other_countries = [p["country"] for uid, p in game_state.players.items() if
                       uid != user_id and p.get("country") and not p.get("eliminated")]
    if not other_countries:
        return await message.answer("–ù–µ—Ç –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω –¥–ª—è –æ–∫–∞–∑–∞–Ω–∏—è –ø–æ–º–æ—â–∏.", reply_markup=main_menu(user_id))

    kb_rows = [[KeyboardButton(text=c)] for c in other_countries] + [[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]]
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –æ–∫–∞–∑–∞–Ω–∏—è –ø–æ–º–æ—â–∏:",
                         reply_markup=ReplyKeyboardMarkup(keyboard=kb_rows, resize_keyboard=True))
    await state.set_state(LendLease.choosing_target)


@router.message(LendLease.choosing_target)
async def lend_lease_choose_target(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu(message.from_user.id))
    target_uid = next((uid for uid, pl in game_state.players.items() if pl.get("country") == text), None)
    if not target_uid:
        return await message.answer("–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
    await state.update_data(target_uid=target_uid, target_country=text)
    sender_budget = game_state.players[message.from_user.id]['budget']
    max_amount = int(sender_budget * 0.5)
    kb_buttons = [KeyboardButton(text=str(int(sender_budget * p))) for p in [0.1, 0.25]] + [
        KeyboardButton(text=str(max_amount))]
    keyboard = ReplyKeyboardMarkup(keyboard=[kb_buttons, [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True,
                                   one_time_keyboard=True)
    await message.answer(
        f"–í–∞—à –±—é–¥–∂–µ—Ç: ${sender_budget}.\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 50% (${max_amount}).\n\n–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Å—Ç—Ä–∞–Ω—É {text}?",
        reply_markup=keyboard)
    await state.set_state(LendLease.entering_amount)


@router.message(LendLease.entering_amount)
async def lend_lease_enter_amount(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu(message.from_user.id))
    try:
        amount = int(text)
        if amount <= 0: raise ValueError
    except ValueError:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    sender_id = message.from_user.id
    sender_budget = game_state.players[sender_id]['budget']
    max_amount = int(sender_budget * 0.5)
    if amount > max_amount:
        return await message.answer(f"–°—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 50% (${max_amount}).")
    user_data = await state.get_data()
    target_country = user_data.get('target_country')
    await state.update_data(amount=amount)
    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
                                   resize_keyboard=True)
    await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ${amount} –≤ —Å—Ç—Ä–∞–Ω—É {target_country}?",
                         reply_markup=keyboard)
    await state.set_state(LendLease.confirming)


@router.message(LendLease.confirming, F.text.in_({"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞"}))
async def lend_lease_confirm(message: types.Message, state: FSMContext):
    text = message.text.strip()
    user_data = await state.get_data()
    await state.clear()
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        return await message.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu(message.from_user.id))
    sender_id = message.from_user.id
    amount = user_data.get('amount')
    target_uid = user_data.get('target_uid')
    sender = game_state.players[sender_id]
    receiver = game_state.players[target_uid]
    if sender['budget'] < amount:
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu(sender_id))
    sender['budget'] -= amount
    receiver['budget'] += amount
    sender['actions_left'] -= 1
    await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ ${amount} –≤ —Å—Ç—Ä–∞–Ω—É {receiver['country']}.\n"
                         f"–í–∞—à –Ω–æ–≤—ã–π –±—é–¥–∂–µ—Ç: ${sender['budget']}.\n"
                         f"–û—Å—Ç–∞–ª–æ—Å—å –¥–µ–π—Å—Ç–≤–∏–π: {sender['actions_left']}.",
                         reply_markup=main_menu(sender_id))
    try:
        await message.bot.send_message(target_uid, f"ü§ù –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–º–æ—â—å –æ—Ç **{sender['country']}**!\n"
                                                   f"–°—É–º–º–∞: ${amount}.\n–í–∞—à –Ω–æ–≤—ã–π –±—é–¥–∂–µ—Ç: ${receiver['budget']}.",
                                       parse_mode="Markdown")
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è ({target_uid}) –æ –õ–µ–Ω–¥-–ª–∏–∑–µ: {e}")


# --- –ê—Ç–∞–∫–∞ ---
@router.message(PlayerFilter(is_admin=False), F.text.startswith("–ê—Ç–∞–∫–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω—É"))
async def attack_start(message: types.Message, state: FSMContext):
    if not is_player_in_game(message): return await not_in_game_answer(message)
    user_id = message.from_user.id
    p = game_state.players[user_id]
    if p['actions_left'] <= 0:
        return await message.answer("‚ùå –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π.", reply_markup=main_menu(user_id))
    if p["ready_nukes"] <= 0:
        return await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö —è–¥–µ—Ä–Ω—ã—Ö –±–æ–º–±.", reply_markup=main_menu(user_id))
    attacked_this_round = p.get("attacked_countries_this_round", [])
    targets = [pl["country"] for uid, pl in game_state.players.items() if
               pl.get("country") and uid != user_id and not pl.get('eliminated') and pl[
                   "country"] not in attacked_this_round]
    if not targets:
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–π –¥–ª—è –∞—Ç–∞–∫–∏.", reply_markup=main_menu(user_id))
    kb_rows = [[KeyboardButton(text=t)] for t in targets] + [[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]]
    await message.answer("–í—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –∞—Ç–∞–∫–∏:",
                         reply_markup=ReplyKeyboardMarkup(keyboard=kb_rows, resize_keyboard=True))
    await state.set_state(Attack.choosing_target)


@router.message(Attack.choosing_target)
async def attack_choose_target(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–ê—Ç–∞–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu(message.from_user.id))
    target_uid = next((uid for uid, pl in game_state.players.items() if pl.get("country") == text), None)
    if not target_uid:
        return await message.answer("–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.")
    await state.update_data(target_uid=target_uid)
    target_player = game_state.players[target_uid]
    kb_rows = [[KeyboardButton(text=c + (" (—Ä–∞–∑—Ä—É—à–µ–Ω)" if d.get("level", 0) == 0 else ""))] for c, d in target_player["cities"].items()]
    await message.answer(f"–¶–µ–ª—å ‚Äî {text}. –í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –¥–ª—è —É–¥–∞—Ä–∞:",
                         reply_markup=ReplyKeyboardMarkup(keyboard=kb_rows + [[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
                                                          resize_keyboard=True))
    await state.set_state(Attack.choosing_city)


@router.message(Attack.choosing_city)
async def attack_choose_city(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    target_uid = user_data.get("target_uid")
    await state.clear()
    if message.text.strip() == "–û—Ç–º–µ–Ω–∞":
        return await message.answer("–ê—Ç–∞–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu(message.from_user.id))
    await attack_final_step_logic(message, target_uid)


# --- –ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã ---
@router.message(PlayerFilter(is_admin=False), F.text == "–ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã")
async def negotiation_start(message: types.Message, state: FSMContext):
    if not is_player_in_game(message): return await not_in_game_answer(message)
    user_id = message.from_user.id
    other_countries = [p["country"] for uid, p in game_state.players.items() if
                       uid != user_id and p.get("country") and not p.get("eliminated")]
    if not other_countries:
        return await message.answer("–ù–µ—Ç –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω –¥–ª—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤.", reply_markup=main_menu(user_id))
    kb_rows = [[KeyboardButton(text=c)] for c in other_countries] + [[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]]
    await message.answer("–í—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤:",
                         reply_markup=ReplyKeyboardMarkup(keyboard=kb_rows, resize_keyboard=True))
    await state.set_state(Negotiation.choosing_target)


@router.message(Negotiation.choosing_target)
async def negotiation_process(message: types.Message, state: FSMContext):
    await state.clear()
    if message.text.strip() == "–û—Ç–º–µ–Ω–∞":
        return await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu(message.from_user.id))
    await negotiation_logic(message)


# --- –ö–∞–ø–∏—Ç—É–ª—è—Ü–∏—è ---
@router.message(PlayerFilter(is_admin=False), F.text == "–ö–∞–ø–∏—Ç—É–ª–∏—Ä–æ–≤–∞—Ç—å")
async def surrender_start(message: types.Message, state: FSMContext):
    if not is_player_in_game(message): return await not_in_game_answer(message)
    await message.answer(
        "–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–∞–ø–∏—Ç—É–ª—è—Ü–∏—é, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ `—Å–±–µ–∂–∞—Ç—å`.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'.",
        reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True),
        parse_mode="Markdown")
    await state.set_state(Surrender.confirming)


@router.message(Surrender.confirming)
async def surrender_process(message: types.Message, state: FSMContext):
    await state.clear()
    await surrender_logic(message)


# =====================================================================================
# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –°–û–ë–´–¢–ò–Ø ---
# =====================================================================================

@router.message(PlayerFilter(is_admin=False), F.text.in_({"üíâ –°–¥–µ–ª–∞—Ç—å –≤–∑–Ω–æ—Å –≤ —Ñ–æ–Ω–¥", "‚úÖ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç"}))
async def handle_global_event_interaction(message: types.Message, state: FSMContext):
    """–ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."""
    if not is_player_in_game(message): return await not_in_game_answer(message)
    if not game_state.active_global_event:
        return await message.answer("–°–æ–±—ã—Ç–∏–µ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å.", reply_markup=main_menu(message.from_user.id))

    user_id = message.from_user.id
    player = game_state.players[user_id]
    event_id = game_state.active_global_event['id']
    event_class = EVENT_CLASSES.get(event_id)

    if event_class:
        event_object = event_class(message.bot, game_state.active_global_event)
        await event_object.handle_interaction(message, state, player)


@router.message(GlobalEvent.entering_investment)
async def global_event_process_investment(message: types.Message, state: FSMContext):
    await state.clear()
    if message.text.strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        return await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu(message.from_user.id))
    try:
        amount = int(message.text.strip())
        if amount <= 0: raise ValueError
    except ValueError:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.",
                                    reply_markup=main_menu(message.from_user.id))

    user_id = message.from_user.id
    player = game_state.players[user_id]
    if player['budget'] < amount:
        return await message.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.", reply_markup=main_menu(user_id))

    player['budget'] -= amount
    if 'investors' not in game_state.active_global_event:
        game_state.active_global_event['investors'] = {}

    current_investment = game_state.active_global_event['investors'].get(user_id, 0)
    new_total_investment = current_investment + amount
    game_state.active_global_event['investors'][user_id] = new_total_investment

    event_id = game_state.active_global_event['id']
    event_class = EVENT_CLASSES[event_id]
    goal = event_class.goal_amount  # <-- –ò–°–ü–†–ê–í–õ–ï–ù–û

    await message.answer(f"‚úÖ –í—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ ${amount}.\n–í–∞—à –æ–±—â–∏–π –≤–∫–ª–∞–¥: **${new_total_investment} / ${goal}**\n"
                         f"–í–∞—à –Ω–æ–≤—ã–π –±—é–¥–∂–µ—Ç: ${player['budget']}",
                         parse_mode="Markdown", reply_markup=main_menu(user_id))

    if new_total_investment >= goal:
        event_object = event_class(message.bot, game_state.active_global_event)
        await event_object.on_success(game_state.players, winner_player=player)
        game_state.active_global_event = None


@router.message(GlobalEvent.entering_contribution)
async def global_event_process_contribution(message: types.Message, state: FSMContext):
    await state.clear()
    if message.text.strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        return await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu(message.from_user.id))
    try:
        amount = int(message.text.strip())
        if amount <= 0: raise ValueError
    except ValueError:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.",
                                    reply_markup=main_menu(message.from_user.id))

    player = game_state.players[message.from_user.id]
    if player['budget'] < amount:
        return await message.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.", reply_markup=main_menu(message.from_user.id))

    player['budget'] -= amount
    game_state.active_global_event['progress'] = game_state.active_global_event.get('progress', 0) + amount

    event_id = game_state.active_global_event['id']
    event_class = EVENT_CLASSES[event_id]
    goal = event_class.goal_amount  # <-- –ò–°–ü–†–ê–í–õ–ï–ù–û

    progress = game_state.active_global_event['progress']
    await message.answer(f"‚úÖ –í—ã –≤–Ω–µ—Å–ª–∏ ${amount} –≤ –æ–±—â–∏–π —Ñ–æ–Ω–¥.\n–ü—Ä–æ–≥—Ä–µ—Å—Å: **${progress} / ${goal}**\n"
                         f"–í–∞—à –Ω–æ–≤—ã–π –±—é–¥–∂–µ—Ç: ${player['budget']}",
                         parse_mode="Markdown", reply_markup=main_menu(message.from_user.id))

    if progress >= goal:
        event_object = event_class(message.bot, game_state.active_global_event)
        await event_object.on_success(game_state.players)
        game_state.active_global_event = None


# =====================================================================================
# --- –ö–û–õ–õ–ë–≠–ö–ò (–ò–ù–õ–ê–ô–ù-–ö–ù–û–ü–ö–ò) ---
# =====================================================================================

@router.callback_query(F.data.startswith("neg_"))
async def handle_negotiation_response(callback: types.CallbackQuery):
    await negotiation_response_logic(callback)


# =====================================================================================
# --- –ì–ê–ó–ï–¢–ê ---
# =====================================================================================

async def generate_newspaper_report():
    if not game_state.round_events:
        return None
    priority_types = ['ATTACK_SUCCESS', 'ATTACK_SHIELDED', 'COUNTRY_ELIMINATED', 'SURRENDERED']
    headlines = []
    priority_events = [e for e in game_state.round_events if e['type'] in priority_types]
    for event in priority_events:
        template_info = TEMPLATES.get(event['type'])
        if template_info:
            template = random.choice(template_info[1])
            headlines.append(f"‚ö° {template.format(**event)}")
    regular_events = [e for e in game_state.round_events if e['type'] not in priority_types]
    event_counts = Counter(e['type'] for e in regular_events)
    processed_types = set()
    for event_type, count in event_counts.items():
        if event_type in processed_types: continue
        template_info = TEMPLATES.get(event_type)
        if not template_info: continue
        summary_threshold, specific_templates, summary_templates = template_info
        if summary_threshold and count >= summary_threshold:
            template = random.choice(summary_templates)
            headlines.append(f"üìå {template}")
            processed_types.add(event_type)
        else:
            specific_events_of_type = [e for e in regular_events if e['type'] == event_type]
            for event in specific_events_of_type:
                template = random.choice(specific_templates)
                headlines.append(f"üîπ {template.format(**event)}")
    if not headlines:
        return None
    random.shuffle(headlines)
    newspaper = f"üì∞ **Le Monde Global - –ò—Ç–æ–≥–∏ —Ä–∞—É–Ω–¥–∞ ‚Ññ{game_state.current_round}** üì∞\n"
    newspaper += "================================\n\n"
    newspaper += "\n\n".join(headlines)
    return newspaper


# =====================================================================================
# --- CORE FUNCTIONS (–õ–û–ì–ò–ö–ê) ---
# =====================================================================================

async def show_statistics_logic(message: types.Message):
    p = game_state.players[message.from_user.id]
    display_name = f"{p['country']} ({p.get('nickname')})" if p.get('nickname') else p['country']
    text = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({display_name}):\n"
            f"üí∞ –ë—é–¥–∂–µ—Ç: ${p['budget']}\n"
            f"üöÄ –†–∞–∫–µ—Ç—ã (–≥–æ—Ç–æ–≤—ã/–≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ): {p['ready_nukes']}/{p['pending_nukes']}\n"
            f"üõ° –©–∏—Ç—ã: {p['shields']}\n"
            f"‚ö° –î–µ–π—Å—Ç–≤–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: {p['actions_left']}\n\n"
            "üèô –ì–æ—Ä–æ–¥–∞:\n")
    for city, c in p["cities"].items():
        text += f"  ‚Ä¢ {city}: —É—Ä. {c['level']}, –¥–æ—Ö–æ–¥ ${c['income']}, —É—Ä–æ–≤–µ–Ω—å –∂–∏–∑–Ω–∏ {c['qol']}%\n"
    await message.answer(text, reply_markup=main_menu(message.from_user.id))


# handlers.py

async def overview_countries_logic(message: types.Message):
    text = "üåç –û–±–∑–æ—Ä –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω:\n\n"
    active_players = [p for p in game_state.players.values() if p.get("country") and not p.get('eliminated')]
    if not active_players:
        return await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –¥–ª—è –æ–±–∑–æ—Ä–∞.", reply_markup=main_menu(message.from_user.id))

    for player in active_players:
        display_text = f"<b>{player['country']} ({player.get('nickname', 'N/A')})</b>"
        cities = player.get("cities", {})

        # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –†–ê–°–ß–ï–¢–ê ---
        avg_level = 0
        avg_qol = 0
        if cities:
            avg_level = round(sum(c["level"] for c in cities.values()) / len(cities), 2)
            avg_qol = round(sum(c["qol"] for c in cities.values()) / len(cities), 2)
        # ---------------------------

        text += (f"{display_text}\n"
                 f"üõ° –©–∏—Ç—ã: {player.get('shields', 0)} | üöÄ –†–∞–∫–µ—Ç—ã: {player.get('ready_nukes', 0)}\n"
                 f"üìà –°—Ä. —É—Ä. –≥–æ—Ä–æ–¥–æ–≤: {avg_level} | ‚ù§Ô∏è –°—Ä. —É—Ä. –∂–∏–∑–Ω–∏: {avg_qol}%\n"  # <-- –ò–ó–ú–ï–ù–ï–ù–ê –°–¢–†–û–ö–ê –í–´–í–û–î–ê
                 "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n")
    await message.answer(text, parse_mode="HTML", reply_markup=main_menu(message.from_user.id))


async def produce_nuclear_logic(message: types.Message):
    user_id = message.from_user.id
    p = game_state.players[user_id]
    if p["budget"] >= config.NUKE_COST:
        p["budget"] -= config.NUKE_COST
        p["pending_nukes"] += 1
        p["actions_left"] -= 1
        qol_penalty = random.randint(5, 10)
        report_lines = []
        for city_name, city_data in p["cities"].items():
            old_qol = city_data['qol']
            city_data['qol'] = max(0, old_qol - qol_penalty)
            report_lines.append(f"  ‚Ä¢ {city_name}: {old_qol}% ‚ÜòÔ∏è {city_data['qol']}%")

        game_state.round_events.append({'type': 'NUKE_PRODUCED', 'country': p['country']})

        await message.answer(
            f"‚úÖ –Ø–¥–µ—Ä–Ω–∞—è –±–æ–º–±–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ.\n\n"
            f"‚ùóÔ∏è–ú–∏–ª–∏—Ç–∞—Ä–∏–∑–∞—Ü–∏—è —ç–∫–æ–Ω–æ–º–∏–∫–∏ –≤—ã–∑–≤–∞–ª–∞ –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è. –£—Ä–æ–≤–µ–Ω—å –∂–∏–∑–Ω–∏ –≤ –≥–æ—Ä–æ–¥–∞—Ö —Å–Ω–∏–∑–∏–ª—Å—è –Ω–∞ {qol_penalty}%:\n"
            + "\n".join(report_lines) +
            f"\n\n–û—Å—Ç–∞–ª–æ—Å—å –¥–µ–π—Å—Ç–≤–∏–π: {p['actions_left']}",
            reply_markup=main_menu(user_id)
        )
    else:
        await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—é–¥–∂–µ—Ç–∞ ({config.NUKE_COST}).", reply_markup=main_menu(user_id))


async def create_shield_logic(message: types.Message):
    user_id = message.from_user.id
    p = game_state.players[user_id]
    if p.get("shields_built_this_round", 0) >= config.MAX_SHIELDS_PER_ROUND:
        return await message.answer(f"‚ùå –õ–∏–º–∏—Ç —â–∏—Ç–æ–≤ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ ({config.MAX_SHIELDS_PER_ROUND}).",
                                    reply_markup=main_menu(user_id))
    if p["budget"] >= config.SHIELD_COST:
        p["budget"] -= config.SHIELD_COST
        p["shields"] += 1
        p["shields_built_this_round"] = p.get("shields_built_this_round", 0) + 1
        p["actions_left"] -= 1


        qol_bonus = random.randint(2, 5)
        report_lines = []
        for city_name, city_data in p["cities"].items():
            old_qol = city_data['qol']
            city_data['qol'] = min(100, old_qol + qol_bonus)
            report_lines.append(f"  ‚Ä¢ {city_name}: {old_qol}% ‚ÜóÔ∏è {city_data['qol']}%")


        game_state.round_events.append({'type': 'SHIELD_BUILT', 'country': p['country']})

        await message.answer(
            f"üõ°Ô∏è –©–∏—Ç —Å–æ–∑–¥–∞–Ω! –í—Å–µ–≥–æ: {p['shields']}.\n\n"
            f"‚úÖ –ù–∞—Ä–æ–¥ —á—É–≤—Å—Ç–≤—É–µ—Ç —Å–µ–±—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏! –£—Ä–æ–≤–µ–Ω—å –∂–∏–∑–Ω–∏ –≤ –≥–æ—Ä–æ–¥–∞—Ö –≤—ã—Ä–æ—Å –Ω–∞ {qol_bonus}%:\n"
            + "\n".join(report_lines) +
            f"\n\n–û—Å—Ç–∞–ª–æ—Å—å –¥–µ–π—Å—Ç–≤–∏–π: {p['actions_left']}",
            reply_markup=main_menu(user_id)
        )
    else:
        await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—é–¥–∂–µ—Ç–∞ ({config.SHIELD_COST}).", reply_markup=main_menu(user_id))




async def upgrade_city_logic(message: types.Message):
    user_id, city_name = message.from_user.id, message.text.strip()
    player = game_state.players[user_id]
    city_to_upgrade = player["cities"][city_name]
    cost = calculate_upgrade_cost(city_to_upgrade["level"])

    if player["budget"] < cost:
        return await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—é–¥–∂–µ—Ç–∞. –ù—É–∂–Ω–æ ${cost}.", reply_markup=main_menu(user_id))
    if city_to_upgrade["level"] >= config.MAX_CITY_LEVEL:
        return await message.answer(f"{city_name} —É–∂–µ –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!", reply_markup=main_menu(user_id))

    # --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---
    player["budget"] -= cost
    player["actions_left"] -= 1
    player["upgrades_this_round"] = player.get("upgrades_this_round", 0) + 1

    city_to_upgrade["level"] += 1
    city_to_upgrade["income"] += 500

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–†–ò–†–û–°–¢–ê QoL ---
    old_qol_upgraded = city_to_upgrade['qol']
    # –ü—Ä–∏–º–µ–Ω—è–µ–º "–ø–∞–¥–∞—é—â—É—é –æ—Ç–¥–∞—á—É"
    if old_qol_upgraded >= 90:
        qol_bonus = random.randint(2, 4)
    elif old_qol_upgraded >= 80:
        qol_bonus = random.randint(3, 5)
    elif old_qol_upgraded >= 70:
        qol_bonus = random.randint(3, 7)
    else:
        qol_bonus = random.randint(7, 15)
    # -----------------------------------------

    # –ü–æ–Ω–∏–∂–∞–µ–º QoL –≤ –û–°–¢–ê–õ–¨–ù–´–• –≥–æ—Ä–æ–¥–∞—Ö
    qol_penalty = random.randint(1, 3)
    penalty_report_lines = []
    for city_name_loop, city_data in player["cities"].items():
        if city_name_loop != city_name:
            old_qol_penalty = city_data['qol']
            city_data['qol'] = max(0, old_qol_penalty - qol_penalty)
            penalty_report_lines.append(f"  ‚Ä¢ {city_name_loop}: {old_qol_penalty}% ‚ÜòÔ∏è {city_data['qol']}%")

    game_state.round_events.append({'type': 'CITY_UPGRADED', 'country': player['country']})

    # –°–æ–±–∏—Ä–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç
    response_text = (
        f"‚úÖ –ì–æ—Ä–æ–¥ **{city_name}** —É–ª—É—á—à–µ–Ω –∑–∞ **${cost}**!\n\n"
        f"üìà **{city_name}:**\n"
        f"  ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {city_to_upgrade['level']}\n"
        f"  ‚Ä¢ –î–æ—Ö–æ–¥: ${city_to_upgrade['income']}\n"
        f"  ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∂–∏–∑–Ω–∏: {old_qol_upgraded}% ‚ÜóÔ∏è {city_to_upgrade['qol']}% (+{qol_bonus}%)\n\n"
    )
    if penalty_report_lines:
        response_text += (
                f"‚ùóÔ∏è –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ –æ–¥–Ω–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã–∑–≤–∞–ª–∞ –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ –≤ –¥—Ä—É–≥–∏—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö. "
                f"–£—Ä–æ–≤–µ–Ω—å –∂–∏–∑–Ω–∏ –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö —Å–Ω–∏–∑–∏–ª—Å—è –Ω–∞ {qol_penalty}%:\n"
                + "\n".join(penalty_report_lines) + "\n\n"
        )
    response_text += f"–û—Å—Ç–∞–ª–æ—Å—å –¥–µ–π—Å—Ç–≤–∏–π: {player['actions_left']}."

    await message.answer(response_text, parse_mode="Markdown", reply_markup=main_menu(user_id))

    if all(c["qol"] >= 100 for c in player["cities"].values()):
        await message.answer(f"üéâ **–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!** {player['country']} –ø–æ–±–µ–¥–∏–ª–∞ –≤ –∏–≥—Ä–µ, –¥–æ—Å—Ç–∏–≥–Ω—É–≤ 100% —É—Ä–æ–≤–Ω—è –∂–∏–∑–Ω–∏!")


# handlers.py

async def attack_final_step_logic(message: types.Message, target_uid: int):
    user_id, city_name_raw = message.from_user.id, message.text.strip()
    attacker = game_state.players[user_id]
    target_player = game_state.players[target_uid]
    city_name = city_name_raw.replace(" (—Ä–∞–∑—Ä—É—à–µ–Ω)", "").strip()

    if city_name not in target_player["cities"]:
        return await message.answer("–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç —É —Ü–µ–ª–∏.", reply_markup=main_menu(user_id))
    if target_player["cities"][city_name].get("level", 1) == 0:
        return await message.answer("–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ —É–∂–µ —Ä–∞–∑—Ä—É—à–µ–Ω.", reply_markup=main_menu(user_id))
    if attacker["ready_nukes"] <= 0:
        return await message.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö —Ä–∞–∫–µ—Ç.", reply_markup=main_menu(user_id))

    attacker["ready_nukes"] -= 1
    attacker["attacked_countries_this_round"].append(target_player['country'])
    attacker["actions_left"] -= 1

    ignore_shields = False
    if game_state.active_global_event and game_state.active_global_event.get('id') == 'SOLAR_FLARE':
        ignore_shields = True

    city_under_attack = target_player["cities"][city_name]
    bunker_level = city_under_attack.get("bunker_level", 0)

    if target_player["shields"] > 0 and not ignore_shields:
        # --- –°–¶–ï–ù–ê–†–ò–ô: –ê–¢–ê–ö–ê –û–¢–†–ê–ñ–ï–ù–ê –©–ò–¢–û–ú ---
        target_player["shields"] -= 1

        qol_penalty_main = random.randint(10, 15)
        qol_penalty_other = random.randint(1, 3)

        if bunker_level > 0:
            bunker_panic_reduction = config.BUNKER_EFFECTS[bunker_level][1]
            qol_penalty_main = int(qol_penalty_main * (1 - bunker_panic_reduction))

        report_lines = []
        for city_loop_name, city_data in target_player["cities"].items():
            old_qol = city_data['qol']
            penalty = qol_penalty_main if city_loop_name == city_name else qol_penalty_other
            city_data['qol'] = max(0, old_qol - penalty)
            report_lines.append(f"  ‚Ä¢ {city_loop_name}: {old_qol}% ‚ÜòÔ∏è {city_data['qol']}% (-{penalty}%)")

        game_state.round_events.append(
            {'type': 'ATTACK_SHIELDED', 'attacker': attacker['country'], 'target': target_player['country']})

        await message.answer(f"üí• –ê—Ç–∞–∫–∞ –Ω–∞ {target_player['country']} –æ—Ç—Ä–∞–∂–µ–Ω–∞ —â–∏—Ç–æ–º!", reply_markup=main_menu(user_id))

        defender_message = f"üõ°Ô∏è **–ê—Ç–∞–∫–∞ –æ—Ç {attacker['country']} –Ω–∞ –≥–æ—Ä–æ–¥ {city_name} –æ—Ç—Ä–∞–∂–µ–Ω–∞!**\n\n"
        if bunker_level > 0:
            defender_message += f"‚úÖ –ë—É–Ω–∫–µ—Ä —É—Ä–æ–≤–Ω—è {bunker_level} –≤ –≥–æ—Ä–æ–¥–µ **–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Å–Ω–∏–∑–∏–ª –ø–∞–Ω–∏–∫—É** —Å—Ä–µ–¥–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è.\n"
        else:
            defender_message += "‚ùóÔ∏è–ù–æ–≤–æ—Å—Ç—å –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–π—Å—è —Ä–∞–∫–µ—Ç–µ –≤—ã–∑–≤–∞–ª–∞ –ø–∞–Ω–∏–∫—É, —Å–Ω–∏–∑–∏–≤ —É—Ä–æ–≤–µ–Ω—å –∂–∏–∑–Ω–∏.\n"

        defender_message += "–ò—Ç–æ–≥–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è QoL:\n" + "\n".join(report_lines)
        defender_message += f"\n\n–û—Å—Ç–∞–ª–æ—Å—å —â–∏—Ç–æ–≤: {target_player['shields']}."

        try:
            await message.bot.send_message(target_uid, defender_message, parse_mode="Markdown")
        except Exception as e:
            print(f"Error notifying defender about shield: {e}")

    else:
        # --- –°–¶–ï–ù–ê–†–ò–ô: –ü–†–Ø–ú–û–ï –ü–û–ü–ê–î–ê–ù–ò–ï (–ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –ò –ü–†–ê–í–ò–õ–¨–ù–´–ô –ë–õ–û–ö) ---
        if ignore_shields and target_player["shields"] > 0:
            await message.answer("üí• **–°–æ–ª–Ω–µ—á–Ω–∞—è –≤—Å–ø—ã—à–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∞ —â–∏—Ç—ã! –ê—Ç–∞–∫–∞ –ø—Ä–æ—à–ª–∞ –±–µ—Å–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–µ–Ω–Ω–æ!**",
                                 parse_mode="Markdown")

        city_under_attack["level"], city_under_attack["income"] = 0, 0

        min_qol = 0
        if bunker_level > 0:
            min_qol = config.BUNKER_EFFECTS[bunker_level][0]
            city_under_attack['qol'] = min_qol
        else:
            city_under_attack['qol'] = random.randint(1, 5)

        game_state.round_events.append(
            {'type': 'ATTACK_SUCCESS', 'attacker': attacker['country'], 'target': target_player['country'],
             'city': city_name})

        await message.answer(f"üöÄ –£—Å–ø–µ—Ö! –ì–æ—Ä–æ–¥ {city_name} ({target_player['country']}) —Ä–∞–∑—Ä—É—à–µ–Ω!",
                             reply_markup=main_menu(user_id))

        defender_message = f"üî• **–í–ù–ò–ú–ê–ù–ò–ï! {attacker['country']} –Ω–∞–Ω–µ—Å–ª–∞ —è–¥–µ—Ä–Ω—ã–π —É–¥–∞—Ä –ø–æ –≥–æ—Ä–æ–¥—É {city_name}!**\n–ì–æ—Ä–æ–¥ —Ä–∞–∑—Ä—É—à–µ–Ω."
        if bunker_level > 0:
            defender_message += f"\n\n‚úÖ –ù–∞—Å–µ–ª–µ–Ω–∏–µ —É–∫—Ä—ã–ª–æ—Å—å –≤ –±—É–Ω–∫–µ—Ä–µ —É—Ä–æ–≤–Ω—è {bunker_level}! –£—Ä–æ–≤–µ–Ω—å –∂–∏–∑–Ω–∏ –≤ –≥–æ—Ä–æ–¥–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –Ω–∞ –æ—Ç–º–µ—Ç–∫–µ **{min_qol}%**."
        else:
            defender_message += f"\n\n‚ùóÔ∏è–í—ã–∂–∏–≤—à–∏–µ –≤–≤–µ—Ä–≥–Ω—É—Ç—ã –≤ —Ö–∞–æ—Å. –£—Ä–æ–≤–µ–Ω—å –∂–∏–∑–Ω–∏ —É–ø–∞–ª –ø–æ—á—Ç–∏ –¥–æ –Ω—É–ª—è."

        try:
            await message.bot.send_message(target_uid, defender_message, parse_mode="Markdown")
        except Exception as e:
            print(f"Error notifying defender about attack: {e}")

        if all(c.get("level", 0) == 0 for c in target_player["cities"].values()):
            target_player["eliminated"] = True
            game_state.round_events.append(
                {'type': 'COUNTRY_ELIMINATED', 'attacker': attacker['country'], 'country': target_player['country']})
            await message.answer(f"‚ò†Ô∏è –°—Ç—Ä–∞–Ω–∞ {target_player['country']} –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑—Ä—É—à–µ–Ω–∞!",
                                 reply_markup=main_menu(user_id))
            try:
                await message.bot.send_message(target_uid, "–í—Å–µ –≤–∞—à–∏ –≥–æ—Ä–æ–¥–∞ —Ä–∞–∑—Ä—É—à–µ–Ω—ã. –í—ã –≤—ã–±—ã–ª–∏ –∏–∑ –∏–≥—Ä—ã.",
                                               reply_markup=ReplyKeyboardRemove())
            except Exception as e:
                print(f"Error notifying eliminated player: {e}")


async def negotiation_logic(message: types.Message):
    user_id, text = message.from_user.id, message.text.strip()
    target = next(((uid, p) for uid, p in game_state.players.items() if p.get("country") == text), None)
    if not target:
        return await message.answer("–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu(user_id))
    target_id, initiator_country = target[0], game_state.players[user_id]["country"]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"neg_accept:{user_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"neg_decline:{user_id}")],
        [InlineKeyboardButton(text="‚è≥ –û—Ç–ª–æ–∂–∏—Ç—å", callback_data=f"neg_time:{user_id}")],
    ])
    try:
        await message.bot.send_message(target_id, f"üí¨ <b>{initiator_country}</b> –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã.",
                                       reply_markup=keyboard, parse_mode="HTML")
        await message.answer(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç—Ä–∞–Ω–µ {text}.", reply_markup=main_menu(user_id))
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {e}", reply_markup=main_menu(user_id))


async def surrender_logic(message: types.Message):
    user_id, text = message.from_user.id, message.text.strip().lower()
    if text == "—Å–±–µ–∂–∞—Ç—å":
        player = game_state.players[user_id]
        player["eliminated"] = True
        for city in player["cities"].values(): city["level"], city["income"], city["qol"] = 0, 0, 0
        game_state.round_events.append({'type': 'SURRENDERED', 'country': player['country']})
        await message.answer("–í—ã –∫–∞–ø–∏—Ç—É–ª–∏—Ä–æ–≤–∞–ª–∏ –∏ –≤—ã–±—ã–ª–∏ –∏–∑ –∏–≥—Ä—ã.", reply_markup=ReplyKeyboardRemove())
        try:
            await message.bot.send_message(config.ADMIN_ID,
                                           f"üè≥Ô∏è –ò–≥—Ä–æ–∫ {player.get('nickname', 'N/A')} ({player.get('country', 'N/A')}) –∫–∞–ø–∏—Ç—É–ª–∏—Ä–æ–≤–∞–ª.")
        except Exception as e:
            print(f"Error notifying admin of surrender: {e}")
    else:
        await message.answer("–ö–∞–ø–∏—Ç—É–ª—è—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu(user_id))


async def toggle_ready_status_logic(message: types.Message):
    user_id = message.from_user.id
    player = game_state.players[user_id]
    player["ready_for_next_round"] = not player.get("ready_for_next_round", False)

    status_text = "–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É." if player[
        "ready_for_next_round"] else "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å."
    await message.answer(status_text, reply_markup=main_menu(user_id))
    active_players = [p for uid, p in game_state.players.items() if
                      p.get("country") and not p.get("eliminated") and uid != config.ADMIN_ID]
    if active_players and all(p.get("ready_for_next_round") for p in active_players):
        try:
            await message.bot.send_message(config.ADMIN_ID, "‚úÖ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥!")
        except Exception as e:
            print(f"Error notifying admin 'all ready': {e}")

async def call_admin_logic(message: types.Message):
    user_id = message.from_user.id
    ban_until = game_state.call_admin_bans.get(user_id)
    if ban_until and time.time() < ban_until:
        return await message.answer(f"–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã. –û—Å—Ç–∞–ª–æ—Å—å {round(ban_until - time.time())} —Å–µ–∫.")
    user_info = game_state.players.get(user_id, {})
    text = (f"‚ùóÔ∏è <b>–í—ã–∑–æ–≤ –∞–¥–º–∏–Ω–∞!</b>\n"
            f"–ò–≥—Ä–æ–∫: @{message.from_user.username or 'N/A'}\n"
            f"–°—Ç—Ä–∞–Ω–∞: {user_info.get('country', 'N/A')}\n"
            f"User ID: `{user_id}`")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–µ–π—á–∞—Å –∑–∞–π–¥—É", callback_data=f"admin_call_now:{user_id}")],
        [InlineKeyboardButton(text="‚è≥ –ë—É–¥—É —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É", callback_data=f"admin_call_minute:{user_id}")],
        [InlineKeyboardButton(text="üëâ –ó–∞–π–¥–∏ –∫–æ –º–Ω–µ", callback_data=f"admin_call_come:{user_id}")],
        [InlineKeyboardButton(text="üö´ –ë–∞–Ω –Ω–∞ 2 –º–∏–Ω", callback_data=f"admin_call_ban:{user_id}")]
    ])
    try:
        await message.bot.send_message(config.ADMIN_ID, text, parse_mode="HTML", reply_markup=keyboard)
        await message.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except Exception as e:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
        print(f"Error calling admin: {e}")


async def negotiation_response_logic(callback: types.CallbackQuery):
    action, initiator_id_str = callback.data.split(":")
    initiator_id, responder_id = int(initiator_id_str), callback.from_user.id
    if responder_id not in game_state.players or initiator_id not in game_state.players:
        return await callback.answer("–û—à–∏–±–∫–∞: –æ–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
    responder_country = game_state.players[responder_id]["country"]
    initiator_country = game_state.players[initiator_id]["country"]
    response_map = {
        "neg_accept": (f"‚úÖ <b>{responder_country}</b> –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.",
                       f"–í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç <b>{initiator_country}</b>."),
        "neg_time": (f"‚è≥ <b>{responder_country}</b> –æ—Ç–ª–æ–∂–∏–ª–∞ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã.",
                     f"–í—ã –æ—Ç–ª–æ–∂–∏–ª–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã —Å <b>{initiator_country}</b>."),
        "neg_decline": (f"‚ùå <b>{responder_country}</b> –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.",
                        f"–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç <b>{initiator_country}</b>.")
    }
    initiator_msg, responder_msg = response_map.get(action, (None, None))
    try:
        await callback.bot.send_message(initiator_id, initiator_msg, parse_mode="HTML")
    except Exception as e:
        print(f"Could not send negotiation response to initiator {initiator_id}: {e}")
    await callback.message.edit_text(responder_msg, parse_mode="HTML", reply_markup=None)
    await callback.answer()

