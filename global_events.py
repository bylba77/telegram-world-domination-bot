# global_events.py

import random
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from events_base import BaseEvent
import game_state  # –ù–∞–º –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏–≥—Ä—ã



# --- –û–ü–†–ï–î–ï–õ–Ø–ï–ú –õ–û–ì–ò–ö–£ –ö–ê–ñ–î–û–ì–û –°–û–ë–´–¢–ò–Ø –ö–ê–ö –û–¢–î–ï–õ–¨–ù–´–ô –ö–õ–ê–°–° ---

class PandemicEvent(BaseEvent):
    ID = "PANDEMIC"
    name = "–ì–ª–æ–±–∞–ª—å–Ω–∞—è –ü–∞–Ω–¥–µ–º–∏—è"
    button_text = "üíâ –°–¥–µ–ª–∞—Ç—å –≤–∑–Ω–æ—Å –≤ —Ñ–æ–Ω–¥"
    duration = 3
    goal_amount = 20000
    type = 'crisis'
    on_start_effect = {"type": "income_modifier", "value": -0.20}

    async def get_start_message(self):
        return (f"üö® **–ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –£–ì–†–û–ó–ê!** –í –º–∏—Ä–µ –Ω–∞—á–∞–ª–∞—Å—å –ø–∞–Ω–¥–µ–º–∏—è! "
                f"–î–æ—Ö–æ–¥ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤ —Å–Ω–∏–∂–µ–Ω –Ω–∞ 20%, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç —Å–æ–±—Ä–∞–Ω "
                f"—Ñ–æ–Ω–¥ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ä–∞–∑–º–µ—Ä–µ **${self.goal_amount}**.")

    async def on_fail(self, players):
        fail_message = ("**–ö–û–õ–õ–ê–ü–°!** –ú–∏—Ä–æ–≤—ã–º –ª–∏–¥–µ—Ä–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è. –ü–∞–Ω–¥–µ–º–∏—è –≤—ã—Ö–æ–¥–∏—Ç –∏–∑-–ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª—è. "
                        "–í —Å–ª–µ–¥—É—é—â–∏–µ 2 —Ä–∞—É–Ω–¥–∞ –º–∏—Ä–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞ –±—É–¥–µ—Ç –≤ —Ä–µ—Ü–µ—Å—Å–∏–∏ (-50% –∫–æ –≤—Å–µ–º—É –¥–æ—Ö–æ–¥—É).")
        for player_id, p_data in players.items():
            if p_data.get("country"):
                p_data['temp_effects']['recession'] = {'rounds_left': 2}
                try:
                    await self.bot.send_message(player_id, fail_message, parse_mode="Markdown")
                except Exception:
                    pass

    async def on_success(self, players, winner_player=None):
        success_message = ("**–ü–û–ë–ï–î–ê –ù–ê–î –ë–û–õ–ï–ó–ù–¨–Æ!** –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–æ–Ω–¥ —Å–æ–±—Ä–∞–Ω! –£—á—ë–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ –≤–∞–∫—Ü–∏–Ω—É. "
                           "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–∞–Ω–∫—Ü–∏–∏ —Å–Ω–∏–º–∞—é—Ç—Å—è!")
        qol_bonus = random.randint(3, 5)
        for player_id, p_data in players.items():
            if p_data.get("country"):
                for city in p_data['cities'].values():
                    city['qol'] = min(100, city['qol'] + qol_bonus)
                try:
                    await self.bot.send_message(player_id, success_message)
                except Exception:
                    pass

    async def handle_interaction(self, message, state, player):
        from states import GlobalEvent
        goal = self.goal_amount
        progress = self.data['progress']
        await message.answer(
            f"**{self.name}**\n\n–°–æ–±—Ä–∞–Ω–æ: **${progress} / ${goal}**\n\n"
            f"–í–∞—à –±—é–¥–∂–µ—Ç: ${player['budget']}\n–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –≤ –æ–±—â–∏–π —Ñ–æ–Ω–¥?",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        )
        await state.set_state(GlobalEvent.entering_contribution)


class TechBreakthroughEvent(BaseEvent):
    ID = "TECH_BREAKTHROUGH"
    name = "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ü—Ä–æ—Ä—ã–≤"
    button_text = "‚úÖ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç"
    duration = 3
    goal_amount = 10000
    type = 'opportunity'

    async def get_start_message(self):
        return (f"üí° **–®–ê–ù–° –í–ï–ö–ê!** –£—á—ë–Ω—ã–µ –Ω–∞ –ø–æ—Ä–æ–≥–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–µ—Ä–º–æ—è–¥–µ—Ä–Ω–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞. "
                f"–ù–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–≤–æ–π —Å—É–º–º–∞—Ä–Ω–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ—Ç **${self.goal_amount}**, "
                f"–ø–æ–ª—É—á–∏—Ç –≤–µ—á–Ω—ã–π –±–æ–Ω—É—Å +15% –∫ –¥–æ—Ö–æ–¥—É –≤—Å–µ—Ö —Å–≤–æ–∏—Ö –≥–æ—Ä–æ–¥–æ–≤!")

    async def on_fail(self, players):
        fail_message = "–£–ü–£–©–ï–ù–ù–ê–Ø –í–û–ó–ú–û–ñ–ù–û–°–¢–¨! –ù–∏–∫—Ç–æ –Ω–µ —É—Å–ø–µ–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç. –í—Å–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —É—Ç–µ—Ä—è–Ω—ã."
        for player_id, p_data in players.items():
            if p_data.get("country"):
                try:
                    await self.bot.send_message(player_id, fail_message)
                except Exception:
                    pass

    async def on_success(self, players, winner_player=None):
        winner_player['income_modifier'] = winner_player.get('income_modifier', 1.0) + 0.15
        success_msg = (f"üèÜ **{self.name} –ó–ê–í–ï–†–®–ï–ù–û!**\n\n"
                       f"–°—Ç—Ä–∞–Ω–∞ **{winner_player['country']}** –ø–µ—Ä–≤–æ–π –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∏ –ø–æ–ª—É—á–∞–µ—Ç –≤–µ—á–Ω—ã–π –±–æ–Ω—É—Å –∫ –¥–æ—Ö–æ–¥—É!")
        for player_id, p_data in players.items():
            if p_data.get("country"):
                try:
                    await self.bot.send_message(player_id, success_msg, parse_mode="Markdown")
                except Exception:
                    pass

    async def handle_interaction(self, message, state, player):
        from states import GlobalEvent
        goal = self.goal_amount
        investors = self.data.get('investors', {})
        my_progress = investors.get(message.from_user.id, 0)
        await message.answer(
            f"**{self.name}**\n\n–¶–µ–ª—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: **${goal}**\n"
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π –≤–∫–ª–∞–¥: **${my_progress}**\n\n"
            f"–í–∞—à –±—é–¥–∂–µ—Ç: ${player['budget']}\n–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å?",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        )
        await state.set_state(GlobalEvent.entering_investment)


class SolarFlareEvent(BaseEvent):
    ID = "SOLAR_FLARE"
    name = "–°–æ–ª–Ω–µ—á–Ω–∞—è –í—Å–ø—ã—à–∫–∞"
    duration = 1
    type = 'shift'

    async def get_start_message(self):
        return ("üí• **–ö–û–°–ú–ò–ß–ï–°–ö–ê–Ø –ê–ù–û–ú–ê–õ–ò–Ø!** –ú–æ—â–Ω—ã–π –≤—ã–±—Ä–æ—Å –∫–æ—Ä–æ–Ω–∞–ª—å–Ω–æ–π –º–∞—Å—Å—ã –æ–±—Ä—É—à–∏–ª—Å—è –Ω–∞ –ø–ª–∞–Ω–µ—Ç—É. "
                "**–í—Å–µ –∑–∞—â–∏—Ç–Ω—ã–µ —â–∏—Ç—ã –≤ –º–∏—Ä–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã** –Ω–∞ —ç—Ç–æ—Ç —Ä–∞—É–Ω–¥!")


class EnergyCrisisEvent(BaseEvent):
    ID = "ENERGY_CRISIS"
    name = "–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–ª–ª–∞–ø—Å"
    button_text = "üíâ –°–¥–µ–ª–∞—Ç—å –≤–∑–Ω–æ—Å –≤ —Ñ–æ–Ω–¥"
    duration = 3
    goal_amount = 15000
    type = 'crisis'

    async def get_start_message(self):
        return (f"üìâ **–≠–ù–ï–†–ì–ï–¢–ò–ß–ï–°–ö–ò–ô –ö–û–õ–õ–ê–ü–°!** –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–±–æ–π –≤ —ç–Ω–µ—Ä–≥–æ—Å–µ—Ç—è—Ö –ø—Ä–∏–≤–µ–ª –∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏. "
                f"**–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —â–∏—Ç–æ–≤ –∏ —è–¥–µ—Ä–Ω—ã—Ö —Ä–∞–∫–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ**, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç —Å–æ–±—Ä–∞–Ω–∞ —Å—É–º–º–∞ –≤ **${self.goal_amount}** –Ω–∞ —Ä–µ–º–æ–Ω—Ç –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã.")

    async def on_fail(self, players):
        fail_message = ("**–ü–†–û–ú–´–®–õ–ï–ù–ù–´–ô –ö–û–õ–õ–ê–ü–°!** –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–Ω–µ—Ä–≥–æ—Å–µ—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å. "
                        "–í —Å–ª–µ–¥—É—é—â–µ–º —Ä–∞—É–Ω–¥–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —â–∏—Ç–æ–≤ –∏ —Ä–∞–∫–µ—Ç –±—É–¥–µ—Ç —É–¥–≤–æ–µ–Ω–∞ –∏–∑-–∑–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–∞ —Ä–µ—Å—É—Ä—Å–æ–≤.")
        # –ó–¥–µ—Å—å –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–≤—ã—à–µ–Ω–∏—è —Ü–µ–Ω
        for player_id, p_data in players.items():
            if p_data.get("country"):
                try:
                    await self.bot.send_message(player_id, fail_message, parse_mode="Markdown")
                except Exception:
                    pass

    async def on_success(self, players, winner_player=None):
        success_message = ("**–°–ò–°–¢–ï–ú–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê!** –≠–Ω–µ—Ä–≥–æ—Å–µ—Ç—å —Å–Ω–æ–≤–∞ –≤ —Å—Ç—Ä–æ—é! "
                           "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Ä–∞–±–æ—Ç–µ. –í –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ, "
                           "–≤—Å–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ–ª—É—á–∞—é—Ç +1 –æ—á–∫–æ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ä–∞—É–Ω–¥–µ.")
        # –ó–¥–µ—Å—å –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç +1 –û–î
        for player_id, p_data in players.items():
            if p_data.get("country"):
                try:
                    await self.bot.send_message(player_id, success_message)
                except Exception:
                    pass

    async def handle_interaction(self, message, state, player):
        from states import GlobalEvent
        goal = self.goal_amount
        progress = self.data.get('progress', 0)
        await message.answer(
            f"**{self.name}**\n\n–°–æ–±—Ä–∞–Ω–æ –Ω–∞ —Ä–µ–º–æ–Ω—Ç: **${progress} / ${goal}**\n\n"
            f"–í–∞—à –±—é–¥–∂–µ—Ç: ${player['budget']}\n–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ?",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        )
        await state.set_state(GlobalEvent.entering_contribution)


class BlackMarketEvent(BaseEvent):
    ID = "BLACK_MARKET"
    name = "–ß—ë—Ä–Ω—ã–π —Ä—ã–Ω–æ–∫"
    button_text = "‚úÖ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç"
    duration = 2
    goal_amount = 7500 # –¶–µ–Ω–∞ –∑–∞ 2 —Ä–∞–∫–µ—Ç—ã
    type = 'opportunity'

    async def get_start_message(self):
        return (f"ü§´ **–ß–Å–†–ù–´–ô –†–´–ù–û–ö!** –í –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö –≤–æ–¥–∞—Ö –ø–æ—è–≤–∏–ª—Å—è —Ç–æ—Ä–≥–æ–≤–µ—Ü –æ—Ä—É–∂–∏–µ–º. "
                f"–ü–µ—Ä–≤—ã–π, –∫—Ç–æ –∑–∞–ø–ª–∞—Ç–∏—Ç –µ–º—É **${self.goal_amount}**, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–ª—É—á–∏—Ç **2 –≥–æ—Ç–æ–≤—ã–µ —è–¥–µ—Ä–Ω—ã–µ —Ä–∞–∫–µ—Ç—ã** –≤ –æ–±—Ö–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤!")

    async def on_fail(self, players):
        fail_message = "–¢–æ—Ä–≥–æ–≤–µ—Ü –æ—Ä—É–∂–∏–µ–º –ø–æ–∫–∏–Ω—É–ª —Ä–µ–≥–∏–æ–Ω, –Ω–µ –¥–æ–∂–¥–∞–≤—à–∏—Å—å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–ø—É—â–µ–Ω–∞."
        for player_id, p_data in players.items():
             if p_data.get("country"):
                try: await self.bot.send_message(player_id, fail_message)
                except Exception: pass

    async def on_success(self, players, winner_player=None):
        winner_player['ready_nukes'] += 2
        success_msg = (f"üöÄ **–°–î–ï–õ–ö–ê –°–û–°–¢–û–Ø–õ–ê–°–¨!**\n\n"
                       f"–°—Ç—Ä–∞–Ω–∞ **{winner_player['country']}** –∑–∞–∫–ª—é—á–∏–ª–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞ —á—ë—Ä–Ω–æ–º —Ä—ã–Ω–∫–µ –∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–ª—É—á–∏–ª–∞ 2 –≥–æ—Ç–æ–≤—ã–µ –±–æ–µ–≥–æ–ª–æ–≤–∫–∏!")
        for player_id, p_data in players.items():
            if p_data.get("country"):
                try: await self.bot.send_message(player_id, success_msg, parse_mode="Markdown")
                except Exception: pass

    async def handle_interaction(self, message, state, player):
        cost = self.goal_amount
        from keyboards import main_menu
        if player['budget'] >= cost:
            # –°—Ä–∞–∑—É –ø—Ä–æ–≤–æ–¥–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞
            player['budget'] -= cost
            await self.on_success(players=game_state.players, winner_player=player)
            game_state.active_global_event = None # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            await message.answer(f"‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –ø–æ–¥–ø–∏—Å–∞–Ω! –í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ ${cost}. –í–∞—à –Ω–æ–≤—ã–π –±—é–¥–∂–µ—Ç: ${player['budget']}", reply_markup=main_menu(message.from_user.id))
        else:
            await message.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${cost}, —É –≤–∞—Å: ${player['budget']}", reply_markup=main_menu(message.from_user.id))

# global_events.py

class GlobalEspionageEvent(BaseEvent):
    ID = "GLOBAL_ESPIONAGE"
    name = "–ì–ª–æ–±–∞–ª—å–Ω—ã–π —à–ø–∏–æ–Ω–∞–∂"
    duration = 1
    type = 'shift'

    async def get_start_message(self):
        return ("üëÅÔ∏è **–¢–û–¢–ê–õ–¨–ù–ê–Ø –°–õ–ï–ñ–ö–ê!** –ü—Ä–æ–∏–∑–æ—à–ª–∞ —É—Ç–µ—á–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –º–∏—Ä–æ–≤—ã—Ö –¥–µ—Ä–∂–∞–≤. "
                "–ù–∞ —ç—Ç–æ—Ç —Ä–∞—É–Ω–¥ **–±—é–¥–∂–µ—Ç –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∏–∑–≤–µ—Å—Ç–µ–Ω –≤—Å–µ–º** –≤ –º–µ–Ω—é '–û–±–∑–æ—Ä —Å—Ç—Ä–∞–Ω'!")

# --- –†–ï–ï–°–¢–† –í–°–ï–• –°–û–ë–´–¢–ò–ô ---
EVENT_CLASSES = {
    "PANDEMIC": PandemicEvent,
    "TECH_BREAKTHROUGH": TechBreakthroughEvent,
    "SOLAR_FLARE": SolarFlareEvent,
    "ENERGY_CRISIS": EnergyCrisisEvent,
    "BLACK_MARKET": BlackMarketEvent,
    "GLOBAL_ESPIONAGE": GlobalEspionageEvent,
}